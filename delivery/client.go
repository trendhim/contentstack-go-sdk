// Package delivery provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package delivery

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Getallassets request
	Getallassets(ctx context.Context, params *GetallassetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getasingleasset request
	Getasingleasset(ctx context.Context, assetUid AssetUid, params *GetasingleassetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getallcontenttypes request
	Getallcontenttypes(ctx context.Context, params *GetallcontenttypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getasinglecontenttype request
	Getasinglecontenttype(ctx context.Context, contentTypeUid ContentTypeUid, params *GetasinglecontenttypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getallentries request
	Getallentries(ctx context.Context, contentTypeUid string, params *GetallentriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Queries request
	Queries(ctx context.Context, contentTypeUid ContentTypeUid, params *QueriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getasingleentry request
	Getasingleentry(ctx context.Context, contentTypeUid string, entryUid EntryUid, params *GetasingleentryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getallglobalfields request
	Getallglobalfields(ctx context.Context, params *GetallglobalfieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getasingleglobalfield request
	Getasingleglobalfield(ctx context.Context, globalFieldUid GlobalFieldUid, params *GetasingleglobalfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Synchronization request
	Synchronization(ctx context.Context, params *SynchronizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Getallassets(ctx context.Context, params *GetallassetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallassetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getasingleasset(ctx context.Context, assetUid AssetUid, params *GetasingleassetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetasingleassetRequest(c.Server, assetUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getallcontenttypes(ctx context.Context, params *GetallcontenttypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallcontenttypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getasinglecontenttype(ctx context.Context, contentTypeUid ContentTypeUid, params *GetasinglecontenttypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetasinglecontenttypeRequest(c.Server, contentTypeUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getallentries(ctx context.Context, contentTypeUid string, params *GetallentriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallentriesRequest(c.Server, contentTypeUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Queries(ctx context.Context, contentTypeUid ContentTypeUid, params *QueriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueriesRequest(c.Server, contentTypeUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getasingleentry(ctx context.Context, contentTypeUid string, entryUid EntryUid, params *GetasingleentryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetasingleentryRequest(c.Server, contentTypeUid, entryUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getallglobalfields(ctx context.Context, params *GetallglobalfieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallglobalfieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getasingleglobalfield(ctx context.Context, globalFieldUid GlobalFieldUid, params *GetasingleglobalfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetasingleglobalfieldRequest(c.Server, globalFieldUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Synchronization(ctx context.Context, params *SynchronizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSynchronizationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetallassetsRequest generates requests for Getallassets
func NewGetallassetsRequest(server string, params *GetallassetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_fallback", runtime.ParamLocationQuery, params.IncludeFallback); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_urls", runtime.ParamLocationQuery, params.RelativeUrls); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_dimension", runtime.ParamLocationQuery, params.IncludeDimension); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "access_token", runtime.ParamLocationHeader, params.AccessToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("access_token", headerParam1)

	return req, nil
}

// NewGetasingleassetRequest generates requests for Getasingleasset
func NewGetasingleassetRequest(server string, assetUid AssetUid, params *GetasingleassetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_uid", runtime.ParamLocationPath, assetUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_fallback", runtime.ParamLocationQuery, params.IncludeFallback); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_dimension", runtime.ParamLocationQuery, params.IncludeDimension); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_urls", runtime.ParamLocationQuery, params.RelativeUrls); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "access_token", runtime.ParamLocationHeader, params.AccessToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("access_token", headerParam1)

	return req, nil
}

// NewGetallcontenttypesRequest generates requests for Getallcontenttypes
func NewGetallcontenttypesRequest(server string, params *GetallcontenttypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_count", runtime.ParamLocationQuery, params.IncludeCount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "access_token", runtime.ParamLocationHeader, params.AccessToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("access_token", headerParam1)

	return req, nil
}

// NewGetasinglecontenttypeRequest generates requests for Getasinglecontenttype
func NewGetasinglecontenttypeRequest(server string, contentTypeUid ContentTypeUid, params *GetasinglecontenttypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "access_token", runtime.ParamLocationHeader, params.AccessToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("access_token", headerParam1)

	return req, nil
}

// NewGetallentriesRequest generates requests for Getallentries
func NewGetallentriesRequest(server string, contentTypeUid string, params *GetallentriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_fallback", runtime.ParamLocationQuery, params.IncludeFallback); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "access_token", runtime.ParamLocationHeader, params.AccessToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("access_token", headerParam1)

	return req, nil
}

// NewQueriesRequest generates requests for Queries
func NewQueriesRequest(server string, contentTypeUid ContentTypeUid, params *QueriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.ApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, *params.ApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("api_key", headerParam0)
	}

	if params.AccessToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "access_token", runtime.ParamLocationHeader, *params.AccessToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("access_token", headerParam1)
	}

	return req, nil
}

// NewGetasingleentryRequest generates requests for Getasingleentry
func NewGetasingleentryRequest(server string, contentTypeUid string, entryUid EntryUid, params *GetasingleentryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_fallback", runtime.ParamLocationQuery, params.IncludeFallback); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "access_token", runtime.ParamLocationHeader, params.AccessToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("access_token", headerParam1)

	return req, nil
}

// NewGetallglobalfieldsRequest generates requests for Getallglobalfields
func NewGetallglobalfieldsRequest(server string, params *GetallglobalfieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/global_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "access_token", runtime.ParamLocationHeader, params.AccessToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("access_token", headerParam1)

	return req, nil
}

// NewGetasingleglobalfieldRequest generates requests for Getasingleglobalfield
func NewGetasingleglobalfieldRequest(server string, globalFieldUid GlobalFieldUid, params *GetasingleglobalfieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "global_field_uid", runtime.ParamLocationPath, globalFieldUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/global_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "access_token", runtime.ParamLocationHeader, params.AccessToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("access_token", headerParam1)

	return req, nil
}

// NewSynchronizationRequest generates requests for Synchronization
func NewSynchronizationRequest(server string, params *SynchronizationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "init", runtime.ParamLocationQuery, params.Init); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ContentTypeUid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("simple", true, "content_type_uid", runtime.ParamLocationQuery, *params.ContentTypeUid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_from", runtime.ParamLocationQuery, params.StartFrom); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PaginationToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination_token", runtime.ParamLocationQuery, *params.PaginationToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SyncToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sync_token", runtime.ParamLocationQuery, *params.SyncToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "access_token", runtime.ParamLocationHeader, params.AccessToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("access_token", headerParam1)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Getallassets request
	GetallassetsWithResponse(ctx context.Context, params *GetallassetsParams, reqEditors ...RequestEditorFn) (*GetallassetsResponse, error)

	// Getasingleasset request
	GetasingleassetWithResponse(ctx context.Context, assetUid AssetUid, params *GetasingleassetParams, reqEditors ...RequestEditorFn) (*GetasingleassetResponse, error)

	// Getallcontenttypes request
	GetallcontenttypesWithResponse(ctx context.Context, params *GetallcontenttypesParams, reqEditors ...RequestEditorFn) (*GetallcontenttypesResponse, error)

	// Getasinglecontenttype request
	GetasinglecontenttypeWithResponse(ctx context.Context, contentTypeUid ContentTypeUid, params *GetasinglecontenttypeParams, reqEditors ...RequestEditorFn) (*GetasinglecontenttypeResponse, error)

	// Getallentries request
	GetallentriesWithResponse(ctx context.Context, contentTypeUid string, params *GetallentriesParams, reqEditors ...RequestEditorFn) (*GetallentriesResponse, error)

	// Queries request
	QueriesWithResponse(ctx context.Context, contentTypeUid ContentTypeUid, params *QueriesParams, reqEditors ...RequestEditorFn) (*QueriesResponse, error)

	// Getasingleentry request
	GetasingleentryWithResponse(ctx context.Context, contentTypeUid string, entryUid EntryUid, params *GetasingleentryParams, reqEditors ...RequestEditorFn) (*GetasingleentryResponse, error)

	// Getallglobalfields request
	GetallglobalfieldsWithResponse(ctx context.Context, params *GetallglobalfieldsParams, reqEditors ...RequestEditorFn) (*GetallglobalfieldsResponse, error)

	// Getasingleglobalfield request
	GetasingleglobalfieldWithResponse(ctx context.Context, globalFieldUid GlobalFieldUid, params *GetasingleglobalfieldParams, reqEditors ...RequestEditorFn) (*GetasingleglobalfieldResponse, error)

	// Synchronization request
	SynchronizationWithResponse(ctx context.Context, params *SynchronizationParams, reqEditors ...RequestEditorFn) (*SynchronizationResponse, error)
}

type GetallassetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallassetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallassetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetasingleassetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetasingleassetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetasingleassetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallcontenttypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallcontenttypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallcontenttypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetasinglecontenttypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetasinglecontenttypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetasinglecontenttypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallentriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallentriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallentriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetasingleentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetasingleentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetasingleentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallglobalfieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallglobalfieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallglobalfieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetasingleglobalfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetasingleglobalfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetasingleglobalfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SynchronizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SynchronizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SynchronizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetallassetsWithResponse request returning *GetallassetsResponse
func (c *ClientWithResponses) GetallassetsWithResponse(ctx context.Context, params *GetallassetsParams, reqEditors ...RequestEditorFn) (*GetallassetsResponse, error) {
	rsp, err := c.Getallassets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallassetsResponse(rsp)
}

// GetasingleassetWithResponse request returning *GetasingleassetResponse
func (c *ClientWithResponses) GetasingleassetWithResponse(ctx context.Context, assetUid AssetUid, params *GetasingleassetParams, reqEditors ...RequestEditorFn) (*GetasingleassetResponse, error) {
	rsp, err := c.Getasingleasset(ctx, assetUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetasingleassetResponse(rsp)
}

// GetallcontenttypesWithResponse request returning *GetallcontenttypesResponse
func (c *ClientWithResponses) GetallcontenttypesWithResponse(ctx context.Context, params *GetallcontenttypesParams, reqEditors ...RequestEditorFn) (*GetallcontenttypesResponse, error) {
	rsp, err := c.Getallcontenttypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallcontenttypesResponse(rsp)
}

// GetasinglecontenttypeWithResponse request returning *GetasinglecontenttypeResponse
func (c *ClientWithResponses) GetasinglecontenttypeWithResponse(ctx context.Context, contentTypeUid ContentTypeUid, params *GetasinglecontenttypeParams, reqEditors ...RequestEditorFn) (*GetasinglecontenttypeResponse, error) {
	rsp, err := c.Getasinglecontenttype(ctx, contentTypeUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetasinglecontenttypeResponse(rsp)
}

// GetallentriesWithResponse request returning *GetallentriesResponse
func (c *ClientWithResponses) GetallentriesWithResponse(ctx context.Context, contentTypeUid string, params *GetallentriesParams, reqEditors ...RequestEditorFn) (*GetallentriesResponse, error) {
	rsp, err := c.Getallentries(ctx, contentTypeUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallentriesResponse(rsp)
}

// QueriesWithResponse request returning *QueriesResponse
func (c *ClientWithResponses) QueriesWithResponse(ctx context.Context, contentTypeUid ContentTypeUid, params *QueriesParams, reqEditors ...RequestEditorFn) (*QueriesResponse, error) {
	rsp, err := c.Queries(ctx, contentTypeUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueriesResponse(rsp)
}

// GetasingleentryWithResponse request returning *GetasingleentryResponse
func (c *ClientWithResponses) GetasingleentryWithResponse(ctx context.Context, contentTypeUid string, entryUid EntryUid, params *GetasingleentryParams, reqEditors ...RequestEditorFn) (*GetasingleentryResponse, error) {
	rsp, err := c.Getasingleentry(ctx, contentTypeUid, entryUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetasingleentryResponse(rsp)
}

// GetallglobalfieldsWithResponse request returning *GetallglobalfieldsResponse
func (c *ClientWithResponses) GetallglobalfieldsWithResponse(ctx context.Context, params *GetallglobalfieldsParams, reqEditors ...RequestEditorFn) (*GetallglobalfieldsResponse, error) {
	rsp, err := c.Getallglobalfields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallglobalfieldsResponse(rsp)
}

// GetasingleglobalfieldWithResponse request returning *GetasingleglobalfieldResponse
func (c *ClientWithResponses) GetasingleglobalfieldWithResponse(ctx context.Context, globalFieldUid GlobalFieldUid, params *GetasingleglobalfieldParams, reqEditors ...RequestEditorFn) (*GetasingleglobalfieldResponse, error) {
	rsp, err := c.Getasingleglobalfield(ctx, globalFieldUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetasingleglobalfieldResponse(rsp)
}

// SynchronizationWithResponse request returning *SynchronizationResponse
func (c *ClientWithResponses) SynchronizationWithResponse(ctx context.Context, params *SynchronizationParams, reqEditors ...RequestEditorFn) (*SynchronizationResponse, error) {
	rsp, err := c.Synchronization(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSynchronizationResponse(rsp)
}

// ParseGetallassetsResponse parses an HTTP response from a GetallassetsWithResponse call
func ParseGetallassetsResponse(rsp *http.Response) (*GetallassetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallassetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetasingleassetResponse parses an HTTP response from a GetasingleassetWithResponse call
func ParseGetasingleassetResponse(rsp *http.Response) (*GetasingleassetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetasingleassetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallcontenttypesResponse parses an HTTP response from a GetallcontenttypesWithResponse call
func ParseGetallcontenttypesResponse(rsp *http.Response) (*GetallcontenttypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallcontenttypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetasinglecontenttypeResponse parses an HTTP response from a GetasinglecontenttypeWithResponse call
func ParseGetasinglecontenttypeResponse(rsp *http.Response) (*GetasinglecontenttypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetasinglecontenttypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallentriesResponse parses an HTTP response from a GetallentriesWithResponse call
func ParseGetallentriesResponse(rsp *http.Response) (*GetallentriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallentriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueriesResponse parses an HTTP response from a QueriesWithResponse call
func ParseQueriesResponse(rsp *http.Response) (*QueriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &QueriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetasingleentryResponse parses an HTTP response from a GetasingleentryWithResponse call
func ParseGetasingleentryResponse(rsp *http.Response) (*GetasingleentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetasingleentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallglobalfieldsResponse parses an HTTP response from a GetallglobalfieldsWithResponse call
func ParseGetallglobalfieldsResponse(rsp *http.Response) (*GetallglobalfieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallglobalfieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetasingleglobalfieldResponse parses an HTTP response from a GetasingleglobalfieldWithResponse call
func ParseGetasingleglobalfieldResponse(rsp *http.Response) (*GetasingleglobalfieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetasingleglobalfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSynchronizationResponse parses an HTTP response from a SynchronizationWithResponse call
func ParseSynchronizationResponse(rsp *http.Response) (*SynchronizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SynchronizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

