// Package management provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package management

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Getallassets request
	Getallassets(ctx context.Context, params *GetallassetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Uploadasset request with any body
	UploadassetWithBody(ctx context.Context, params *UploadassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetanassetSpecific request
	GetanassetSpecific(ctx context.Context, params *GetanassetSpecificParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Createafolder request with any body
	CreateafolderWithBody(ctx context.Context, params *CreateafolderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Createafolder(ctx context.Context, params *CreateafolderParams, body CreateafolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteafolder request
	Deleteafolder(ctx context.Context, folderUid string, params *DeleteafolderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getasinglefolder request
	Getasinglefolder(ctx context.Context, folderUid FolderUid, params *GetasinglefolderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Updateormovefolder request with any body
	UpdateormovefolderWithBody(ctx context.Context, folderUid string, params *UpdateormovefolderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updateormovefolder(ctx context.Context, folderUid string, params *UpdateormovefolderParams, body UpdateormovefolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetinformationonRTEassets request
	GetinformationonRTEassets(ctx context.Context, params *GetinformationonRTEassetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Geteitheronlyimagesorvideos request
	Geteitheronlyimagesorvideos(ctx context.Context, assetType AssetType, params *GeteitheronlyimagesorvideosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteasset request
	Deleteasset(ctx context.Context, assetUid string, params *DeleteassetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getanasset request
	Getanasset(ctx context.Context, assetUid AssetUid, params *GetanassetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Replaceasset request with any body
	ReplaceassetWithBody(ctx context.Context, assetUid string, params *ReplaceassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Replaceasset(ctx context.Context, assetUid string, params *ReplaceassetParams, body ReplaceassetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Publishanasset request with any body
	PublishanassetWithBody(ctx context.Context, assetUid string, params *PublishanassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Publishanasset(ctx context.Context, assetUid string, params *PublishanassetParams, body PublishanassetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getassetreferences request
	Getassetreferences(ctx context.Context, assetUid string, params *GetassetreferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Unpublishanasset request with any body
	UnpublishanassetWithBody(ctx context.Context, assetUid string, params *UnpublishanassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Unpublishanasset(ctx context.Context, assetUid string, params *UnpublishanassetParams, body UnpublishanassetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDetailsofAllVersionsofanAsset request
	GetDetailsofAllVersionsofanAsset(ctx context.Context, assetUid string, params *GetDetailsofAllVersionsofanAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVersionNameofAsset request
	DeleteVersionNameofAsset(ctx context.Context, assetUid string, versionNumber string, params *DeleteVersionNameofAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetVersionNameforAsset request with any body
	SetVersionNameforAssetWithBody(ctx context.Context, assetUid string, versionNumber string, params *SetVersionNameforAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetVersionNameforAsset(ctx context.Context, assetUid string, versionNumber string, params *SetVersionNameforAssetParams, body SetVersionNameforAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteentriesandassetsinbulk request with any body
	DeleteentriesandassetsinbulkWithBody(ctx context.Context, params *DeleteentriesandassetsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Deleteentriesandassetsinbulk(ctx context.Context, params *DeleteentriesandassetsinbulkParams, body DeleteentriesandassetsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Publishanentrywithreferences request with any body
	PublishanentrywithreferencesWithBody(ctx context.Context, params *PublishanentrywithreferencesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Publishanentrywithreferences(ctx context.Context, params *PublishanentrywithreferencesParams, body PublishanentrywithreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Unpublishentriesandassetsinbulk request with any body
	UnpublishentriesandassetsinbulkWithBody(ctx context.Context, params *UnpublishentriesandassetsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Unpublishentriesandassetsinbulk(ctx context.Context, params *UnpublishentriesandassetsinbulkParams, body UnpublishentriesandassetsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Updateworkflowdetailsinbulk request with any body
	UpdateworkflowdetailsinbulkWithBody(ctx context.Context, params *UpdateworkflowdetailsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updateworkflowdetailsinbulk(ctx context.Context, params *UpdateworkflowdetailsinbulkParams, body UpdateworkflowdetailsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getallcontenttypes request
	Getallcontenttypes(ctx context.Context, params *GetallcontenttypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Createacontenttype request with any body
	CreateacontenttypeWithBody(ctx context.Context, params *CreateacontenttypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Createacontenttype(ctx context.Context, params *CreateacontenttypeParams, body CreateacontenttypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContentTypewithExtensionField request with any body
	CreateContentTypewithExtensionFieldWithBody(ctx context.Context, params *CreateContentTypewithExtensionFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContentTypewithExtensionField(ctx context.Context, params *CreateContentTypewithExtensionFieldParams, body CreateContentTypewithExtensionFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Importacontenttype request with any body
	ImportacontenttypeWithBody(ctx context.Context, params *ImportacontenttypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContentType request
	DeleteContentType(ctx context.Context, contentTypeUid string, params *DeleteContentTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getasinglecontenttype request
	Getasinglecontenttype(ctx context.Context, contentTypeUid ContentTypeUid, params *GetasinglecontenttypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContentType request with any body
	UpdateContentTypeWithBody(ctx context.Context, contentTypeUid string, params *UpdateContentTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContentType(ctx context.Context, contentTypeUid string, params *UpdateContentTypeParams, body UpdateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getallentries request
	Getallentries(ctx context.Context, contentTypeUid string, params *GetallentriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Createanentry request with any body
	CreateanentryWithBody(ctx context.Context, contentTypeUid string, params *CreateanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Createanentry(ctx context.Context, contentTypeUid string, params *CreateanentryParams, body CreateanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Importanentry request with any body
	ImportanentryWithBody(ctx context.Context, contentTypeUid string, params *ImportanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteanentry request
	Deleteanentry(ctx context.Context, contentTypeUid string, entryUid string, params *DeleteanentryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getasingleentry request
	Getasingleentry(ctx context.Context, contentTypeUid string, entryUid EntryUid, params *GetasingleentryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Updateanentry request with any body
	UpdateanentryWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *UpdateanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updateanentry(ctx context.Context, contentTypeUid string, entryUid string, params *UpdateanentryParams, body UpdateanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Exportanentry request
	Exportanentry(ctx context.Context, contentTypeUid string, entryUid string, params *ExportanentryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Importanexistingentry request with any body
	ImportanexistingentryWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *ImportanexistingentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getlanguagesofanentry request
	Getlanguagesofanentry(ctx context.Context, contentTypeUid string, entryUid string, params *GetlanguagesofanentryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Publishanentry request with any body
	PublishanentryWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *PublishanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Publishanentry(ctx context.Context, contentTypeUid string, entryUid string, params *PublishanentryParams, body PublishanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getreferencesofanentry request
	Getreferencesofanentry(ctx context.Context, contentTypeUid string, entryUid string, params *GetreferencesofanentryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Unlocalizeanentry request with any body
	UnlocalizeanentryWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *UnlocalizeanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Unlocalizeanentry(ctx context.Context, contentTypeUid string, entryUid string, params *UnlocalizeanentryParams, body UnlocalizeanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Unpublishanentry request with any body
	UnpublishanentryWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *UnpublishanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Unpublishanentry(ctx context.Context, contentTypeUid string, entryUid string, params *UnpublishanentryParams, body UnpublishanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDetailsofAllVersionsofanEntry request
	GetDetailsofAllVersionsofanEntry(ctx context.Context, contentTypeUid string, entryUid string, params *GetDetailsofAllVersionsofanEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVersionNameofEntry request
	DeleteVersionNameofEntry(ctx context.Context, contentTypeUid string, entryUid string, versionNumber string, params *DeleteVersionNameofEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetVersionNameforEntry request with any body
	SetVersionNameforEntryWithBody(ctx context.Context, contentTypeUid string, entryUid string, versionNumber VersionNumber, params *SetVersionNameforEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetVersionNameforEntry(ctx context.Context, contentTypeUid string, entryUid string, versionNumber VersionNumber, params *SetVersionNameforEntryParams, body SetVersionNameforEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RequestAcceptRejectEntryPublishRequest request with any body
	RequestAcceptRejectEntryPublishRequestWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *RequestAcceptRejectEntryPublishRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestAcceptRejectEntryPublishRequest(ctx context.Context, contentTypeUid string, entryUid string, params *RequestAcceptRejectEntryPublishRequestParams, body RequestAcceptRejectEntryPublishRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Exportacontenttype request
	Exportacontenttype(ctx context.Context, contentTypeUid string, params *ExportacontenttypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getallreferencesofcontenttype request
	Getallreferencesofcontenttype(ctx context.Context, contentTypeUid string, params *GetallreferencesofcontenttypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getallcustomfields request
	Getallcustomfields(ctx context.Context, params *GetallcustomfieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateaDashboardWidgetwithSourceURL request with any body
	CreateaDashboardWidgetwithSourceURLWithBody(ctx context.Context, params *CreateaDashboardWidgetwithSourceURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateaDashboardWidgetwithSourceURL(ctx context.Context, params *CreateaDashboardWidgetwithSourceURLParams, body CreateaDashboardWidgetwithSourceURLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getallwidgets request
	Getallwidgets(ctx context.Context, params *GetallwidgetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Uploadacustomfield request with any body
	UploadacustomfieldWithBody(ctx context.Context, params *UploadacustomfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Uploadacustomfield(ctx context.Context, params *UploadacustomfieldParams, body UploadacustomfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecustomfield request
	Deletecustomfield(ctx context.Context, customFieldUid string, params *DeletecustomfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getasinglecustomfield request
	Getasinglecustomfield(ctx context.Context, customFieldUid CustomFieldUid, params *GetasinglecustomfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Updateacustomfield request with any body
	UpdateacustomfieldWithBody(ctx context.Context, customFieldUid string, params *UpdateacustomfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updateacustomfield(ctx context.Context, customFieldUid string, params *UpdateacustomfieldParams, body UpdateacustomfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatetheDashboardWidget request with any body
	UpdatetheDashboardWidgetWithBody(ctx context.Context, extensionUid string, params *UpdatetheDashboardWidgetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatetheDashboardWidget(ctx context.Context, extensionUid string, params *UpdatetheDashboardWidgetParams, body UpdatetheDashboardWidgetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Updateawidget request with any body
	UpdateawidgetWithBody(ctx context.Context, widgetUid string, params *UpdateawidgetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updateawidget(ctx context.Context, widgetUid string, params *UpdateawidgetParams, body UpdateawidgetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getallglobalfields request
	Getallglobalfields(ctx context.Context, params *GetallglobalfieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Createaglobalfield request with any body
	CreateaglobalfieldWithBody(ctx context.Context, params *CreateaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Createaglobalfield(ctx context.Context, params *CreateaglobalfieldParams, body CreateaglobalfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Importaglobalfield request with any body
	ImportaglobalfieldWithBody(ctx context.Context, params *ImportaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteglobalfield request
	Deleteglobalfield(ctx context.Context, globalFieldUid string, params *DeleteglobalfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getasingleglobalfield request
	Getasingleglobalfield(ctx context.Context, globalFieldUid GlobalFieldUid, params *GetasingleglobalfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Updateaglobalfield request with any body
	UpdateaglobalfieldWithBody(ctx context.Context, globalFieldUid string, params *UpdateaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updateaglobalfield(ctx context.Context, globalFieldUid string, params *UpdateaglobalfieldParams, body UpdateaglobalfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Exportaglobalfield request
	Exportaglobalfield(ctx context.Context, globalFieldUid string, params *ExportaglobalfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Setafallbacklanguage request with any body
	SetafallbacklanguageWithBody(ctx context.Context, params *SetafallbacklanguageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Setafallbacklanguage(ctx context.Context, params *SetafallbacklanguageParams, body SetafallbacklanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetallOrganizations request
	GetallOrganizations(ctx context.Context, params *GetallOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetasingleOrganization request
	GetasingleOrganization(ctx context.Context, organizationUid OrganizationUid, params *GetasingleOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getorganizationlogdetails request
	Getorganizationlogdetails(ctx context.Context, organizationUid string, params *GetorganizationlogdetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getorganizationlogitem request
	Getorganizationlogitem(ctx context.Context, organizationUid string, logUid LogUid, params *GetorganizationlogitemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetallrolesinanOrganization request
	GetallrolesinanOrganization(ctx context.Context, organizationUid string, params *GetallrolesinanOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetallOrganizationinvitations request
	GetallOrganizationinvitations(ctx context.Context, organizationUid string, params *GetallOrganizationinvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdduserstoOrganization request with any body
	AdduserstoOrganizationWithBody(ctx context.Context, organizationUid string, params *AdduserstoOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdduserstoOrganization(ctx context.Context, organizationUid string, params *AdduserstoOrganizationParams, body AdduserstoOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResendpendingOrganizationinvitation request
	ResendpendingOrganizationinvitation(ctx context.Context, organizationUid string, shareUid ShareUid, params *ResendpendingOrganizationinvitationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetallstacksinanOrganization request
	GetallstacksinanOrganization(ctx context.Context, organizationUid string, params *GetallstacksinanOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TransferOrganizationownership request with any body
	TransferOrganizationownershipWithBody(ctx context.Context, organizationUid string, params *TransferOrganizationownershipParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TransferOrganizationownership(ctx context.Context, organizationUid string, params *TransferOrganizationownershipParams, body TransferOrganizationownershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletemultipleitemsfromaRelease request
	DeletemultipleitemsfromaRelease(ctx context.Context, releaseUid string, params *DeletemultipleitemsfromaReleaseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletestack request
	Deletestack(ctx context.Context, params *DeletestackParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getasinglestack request
	Getasinglestack(ctx context.Context, params *GetasinglestackParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Createstack request with any body
	CreatestackWithBody(ctx context.Context, params *CreatestackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Createstack(ctx context.Context, params *CreatestackParams, body CreatestackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Updatestack request with any body
	UpdatestackWithBody(ctx context.Context, params *UpdatestackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updatestack(ctx context.Context, params *UpdatestackParams, body UpdatestackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllUsers request
	AllUsers(ctx context.Context, params *AllUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Acceptstackownedbyotheruser request
	Acceptstackownedbyotheruser(ctx context.Context, ownershipToken OwnershipToken, params *AcceptstackownedbyotheruserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getstacksettings request
	Getstacksettings(ctx context.Context, params *GetstacksettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Addstacksettings request with any body
	AddstacksettingsWithBody(ctx context.Context, params *AddstacksettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Addstacksettings(ctx context.Context, params *AddstacksettingsParams, body AddstacksettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Resetstack request with any body
	ResetstackWithBody(ctx context.Context, params *ResetstackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Resetstack(ctx context.Context, params *ResetstackParams, body ResetstackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Shareastack request with any body
	ShareastackWithBody(ctx context.Context, params *ShareastackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Shareastack(ctx context.Context, params *ShareastackParams, body ShareastackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Transferstackownershiptootherusers request with any body
	TransferstackownershiptootherusersWithBody(ctx context.Context, params *TransferstackownershiptootherusersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Transferstackownershiptootherusers(ctx context.Context, params *TransferstackownershiptootherusersParams, body TransferstackownershiptootherusersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Unshareastack request with any body
	UnshareastackWithBody(ctx context.Context, params *UnshareastackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Unshareastack(ctx context.Context, params *UnshareastackParams, body UnshareastackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserRole request with any body
	UpdateUserRoleWithBody(ctx context.Context, params *UpdateUserRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserRole(ctx context.Context, params *UpdateUserRoleParams, body UpdateUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getuser request
	Getuser(ctx context.Context, params *GetuserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Updateuser request with any body
	UpdateuserWithBody(ctx context.Context, params *UpdateuserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updateuser(ctx context.Context, params *UpdateuserParams, body UpdateuserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Logoutofyouraccount request
	Logoutofyouraccount(ctx context.Context, params *LogoutofyouraccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Logintoyouraccount request with any body
	LogintoyouraccountWithBody(ctx context.Context, params *LogintoyouraccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Logintoyouraccount(ctx context.Context, params *LogintoyouraccountParams, body LogintoyouraccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Activateauseraccount request with any body
	ActivateauseraccountWithBody(ctx context.Context, userActivationToken UserActivationToken, params *ActivateauseraccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Activateauseraccount(ctx context.Context, userActivationToken UserActivationToken, params *ActivateauseraccountParams, body ActivateauseraccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Requestforapassword request with any body
	RequestforapasswordWithBody(ctx context.Context, params *RequestforapasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Requestforapassword(ctx context.Context, params *RequestforapasswordParams, body RequestforapasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Resetpassword request with any body
	ResetpasswordWithBody(ctx context.Context, params *ResetpasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Resetpassword(ctx context.Context, params *ResetpasswordParams, body ResetpasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Getallassets(ctx context.Context, params *GetallassetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallassetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadassetWithBody(ctx context.Context, params *UploadassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadassetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetanassetSpecific(ctx context.Context, params *GetanassetSpecificParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetanassetSpecificRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateafolderWithBody(ctx context.Context, params *CreateafolderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateafolderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Createafolder(ctx context.Context, params *CreateafolderParams, body CreateafolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateafolderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteafolder(ctx context.Context, folderUid string, params *DeleteafolderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteafolderRequest(c.Server, folderUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getasinglefolder(ctx context.Context, folderUid FolderUid, params *GetasinglefolderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetasinglefolderRequest(c.Server, folderUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateormovefolderWithBody(ctx context.Context, folderUid string, params *UpdateormovefolderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateormovefolderRequestWithBody(c.Server, folderUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updateormovefolder(ctx context.Context, folderUid string, params *UpdateormovefolderParams, body UpdateormovefolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateormovefolderRequest(c.Server, folderUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetinformationonRTEassets(ctx context.Context, params *GetinformationonRTEassetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetinformationonRTEassetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Geteitheronlyimagesorvideos(ctx context.Context, assetType AssetType, params *GeteitheronlyimagesorvideosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGeteitheronlyimagesorvideosRequest(c.Server, assetType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteasset(ctx context.Context, assetUid string, params *DeleteassetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteassetRequest(c.Server, assetUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getanasset(ctx context.Context, assetUid AssetUid, params *GetanassetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetanassetRequest(c.Server, assetUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceassetWithBody(ctx context.Context, assetUid string, params *ReplaceassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceassetRequestWithBody(c.Server, assetUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Replaceasset(ctx context.Context, assetUid string, params *ReplaceassetParams, body ReplaceassetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceassetRequest(c.Server, assetUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishanassetWithBody(ctx context.Context, assetUid string, params *PublishanassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishanassetRequestWithBody(c.Server, assetUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Publishanasset(ctx context.Context, assetUid string, params *PublishanassetParams, body PublishanassetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishanassetRequest(c.Server, assetUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getassetreferences(ctx context.Context, assetUid string, params *GetassetreferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetassetreferencesRequest(c.Server, assetUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnpublishanassetWithBody(ctx context.Context, assetUid string, params *UnpublishanassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnpublishanassetRequestWithBody(c.Server, assetUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Unpublishanasset(ctx context.Context, assetUid string, params *UnpublishanassetParams, body UnpublishanassetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnpublishanassetRequest(c.Server, assetUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDetailsofAllVersionsofanAsset(ctx context.Context, assetUid string, params *GetDetailsofAllVersionsofanAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDetailsofAllVersionsofanAssetRequest(c.Server, assetUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVersionNameofAsset(ctx context.Context, assetUid string, versionNumber string, params *DeleteVersionNameofAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVersionNameofAssetRequest(c.Server, assetUid, versionNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetVersionNameforAssetWithBody(ctx context.Context, assetUid string, versionNumber string, params *SetVersionNameforAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetVersionNameforAssetRequestWithBody(c.Server, assetUid, versionNumber, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetVersionNameforAsset(ctx context.Context, assetUid string, versionNumber string, params *SetVersionNameforAssetParams, body SetVersionNameforAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetVersionNameforAssetRequest(c.Server, assetUid, versionNumber, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteentriesandassetsinbulkWithBody(ctx context.Context, params *DeleteentriesandassetsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteentriesandassetsinbulkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteentriesandassetsinbulk(ctx context.Context, params *DeleteentriesandassetsinbulkParams, body DeleteentriesandassetsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteentriesandassetsinbulkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishanentrywithreferencesWithBody(ctx context.Context, params *PublishanentrywithreferencesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishanentrywithreferencesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Publishanentrywithreferences(ctx context.Context, params *PublishanentrywithreferencesParams, body PublishanentrywithreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishanentrywithreferencesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnpublishentriesandassetsinbulkWithBody(ctx context.Context, params *UnpublishentriesandassetsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnpublishentriesandassetsinbulkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Unpublishentriesandassetsinbulk(ctx context.Context, params *UnpublishentriesandassetsinbulkParams, body UnpublishentriesandassetsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnpublishentriesandassetsinbulkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateworkflowdetailsinbulkWithBody(ctx context.Context, params *UpdateworkflowdetailsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateworkflowdetailsinbulkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updateworkflowdetailsinbulk(ctx context.Context, params *UpdateworkflowdetailsinbulkParams, body UpdateworkflowdetailsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateworkflowdetailsinbulkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getallcontenttypes(ctx context.Context, params *GetallcontenttypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallcontenttypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateacontenttypeWithBody(ctx context.Context, params *CreateacontenttypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateacontenttypeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Createacontenttype(ctx context.Context, params *CreateacontenttypeParams, body CreateacontenttypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateacontenttypeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContentTypewithExtensionFieldWithBody(ctx context.Context, params *CreateContentTypewithExtensionFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContentTypewithExtensionFieldRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContentTypewithExtensionField(ctx context.Context, params *CreateContentTypewithExtensionFieldParams, body CreateContentTypewithExtensionFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContentTypewithExtensionFieldRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportacontenttypeWithBody(ctx context.Context, params *ImportacontenttypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportacontenttypeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContentType(ctx context.Context, contentTypeUid string, params *DeleteContentTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContentTypeRequest(c.Server, contentTypeUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getasinglecontenttype(ctx context.Context, contentTypeUid ContentTypeUid, params *GetasinglecontenttypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetasinglecontenttypeRequest(c.Server, contentTypeUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContentTypeWithBody(ctx context.Context, contentTypeUid string, params *UpdateContentTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContentTypeRequestWithBody(c.Server, contentTypeUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContentType(ctx context.Context, contentTypeUid string, params *UpdateContentTypeParams, body UpdateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContentTypeRequest(c.Server, contentTypeUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getallentries(ctx context.Context, contentTypeUid string, params *GetallentriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallentriesRequest(c.Server, contentTypeUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanentryWithBody(ctx context.Context, contentTypeUid string, params *CreateanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateanentryRequestWithBody(c.Server, contentTypeUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Createanentry(ctx context.Context, contentTypeUid string, params *CreateanentryParams, body CreateanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateanentryRequest(c.Server, contentTypeUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportanentryWithBody(ctx context.Context, contentTypeUid string, params *ImportanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportanentryRequestWithBody(c.Server, contentTypeUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteanentry(ctx context.Context, contentTypeUid string, entryUid string, params *DeleteanentryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteanentryRequest(c.Server, contentTypeUid, entryUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getasingleentry(ctx context.Context, contentTypeUid string, entryUid EntryUid, params *GetasingleentryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetasingleentryRequest(c.Server, contentTypeUid, entryUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateanentryWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *UpdateanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateanentryRequestWithBody(c.Server, contentTypeUid, entryUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updateanentry(ctx context.Context, contentTypeUid string, entryUid string, params *UpdateanentryParams, body UpdateanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateanentryRequest(c.Server, contentTypeUid, entryUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Exportanentry(ctx context.Context, contentTypeUid string, entryUid string, params *ExportanentryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportanentryRequest(c.Server, contentTypeUid, entryUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportanexistingentryWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *ImportanexistingentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportanexistingentryRequestWithBody(c.Server, contentTypeUid, entryUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getlanguagesofanentry(ctx context.Context, contentTypeUid string, entryUid string, params *GetlanguagesofanentryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetlanguagesofanentryRequest(c.Server, contentTypeUid, entryUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishanentryWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *PublishanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishanentryRequestWithBody(c.Server, contentTypeUid, entryUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Publishanentry(ctx context.Context, contentTypeUid string, entryUid string, params *PublishanentryParams, body PublishanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishanentryRequest(c.Server, contentTypeUid, entryUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getreferencesofanentry(ctx context.Context, contentTypeUid string, entryUid string, params *GetreferencesofanentryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetreferencesofanentryRequest(c.Server, contentTypeUid, entryUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnlocalizeanentryWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *UnlocalizeanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnlocalizeanentryRequestWithBody(c.Server, contentTypeUid, entryUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Unlocalizeanentry(ctx context.Context, contentTypeUid string, entryUid string, params *UnlocalizeanentryParams, body UnlocalizeanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnlocalizeanentryRequest(c.Server, contentTypeUid, entryUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnpublishanentryWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *UnpublishanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnpublishanentryRequestWithBody(c.Server, contentTypeUid, entryUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Unpublishanentry(ctx context.Context, contentTypeUid string, entryUid string, params *UnpublishanentryParams, body UnpublishanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnpublishanentryRequest(c.Server, contentTypeUid, entryUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDetailsofAllVersionsofanEntry(ctx context.Context, contentTypeUid string, entryUid string, params *GetDetailsofAllVersionsofanEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDetailsofAllVersionsofanEntryRequest(c.Server, contentTypeUid, entryUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVersionNameofEntry(ctx context.Context, contentTypeUid string, entryUid string, versionNumber string, params *DeleteVersionNameofEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVersionNameofEntryRequest(c.Server, contentTypeUid, entryUid, versionNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetVersionNameforEntryWithBody(ctx context.Context, contentTypeUid string, entryUid string, versionNumber VersionNumber, params *SetVersionNameforEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetVersionNameforEntryRequestWithBody(c.Server, contentTypeUid, entryUid, versionNumber, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetVersionNameforEntry(ctx context.Context, contentTypeUid string, entryUid string, versionNumber VersionNumber, params *SetVersionNameforEntryParams, body SetVersionNameforEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetVersionNameforEntryRequest(c.Server, contentTypeUid, entryUid, versionNumber, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestAcceptRejectEntryPublishRequestWithBody(ctx context.Context, contentTypeUid string, entryUid string, params *RequestAcceptRejectEntryPublishRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestAcceptRejectEntryPublishRequestRequestWithBody(c.Server, contentTypeUid, entryUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestAcceptRejectEntryPublishRequest(ctx context.Context, contentTypeUid string, entryUid string, params *RequestAcceptRejectEntryPublishRequestParams, body RequestAcceptRejectEntryPublishRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestAcceptRejectEntryPublishRequestRequest(c.Server, contentTypeUid, entryUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Exportacontenttype(ctx context.Context, contentTypeUid string, params *ExportacontenttypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportacontenttypeRequest(c.Server, contentTypeUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getallreferencesofcontenttype(ctx context.Context, contentTypeUid string, params *GetallreferencesofcontenttypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallreferencesofcontenttypeRequest(c.Server, contentTypeUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getallcustomfields(ctx context.Context, params *GetallcustomfieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallcustomfieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateaDashboardWidgetwithSourceURLWithBody(ctx context.Context, params *CreateaDashboardWidgetwithSourceURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateaDashboardWidgetwithSourceURLRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateaDashboardWidgetwithSourceURL(ctx context.Context, params *CreateaDashboardWidgetwithSourceURLParams, body CreateaDashboardWidgetwithSourceURLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateaDashboardWidgetwithSourceURLRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getallwidgets(ctx context.Context, params *GetallwidgetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallwidgetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadacustomfieldWithBody(ctx context.Context, params *UploadacustomfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadacustomfieldRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Uploadacustomfield(ctx context.Context, params *UploadacustomfieldParams, body UploadacustomfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadacustomfieldRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecustomfield(ctx context.Context, customFieldUid string, params *DeletecustomfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecustomfieldRequest(c.Server, customFieldUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getasinglecustomfield(ctx context.Context, customFieldUid CustomFieldUid, params *GetasinglecustomfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetasinglecustomfieldRequest(c.Server, customFieldUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateacustomfieldWithBody(ctx context.Context, customFieldUid string, params *UpdateacustomfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateacustomfieldRequestWithBody(c.Server, customFieldUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updateacustomfield(ctx context.Context, customFieldUid string, params *UpdateacustomfieldParams, body UpdateacustomfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateacustomfieldRequest(c.Server, customFieldUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatetheDashboardWidgetWithBody(ctx context.Context, extensionUid string, params *UpdatetheDashboardWidgetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatetheDashboardWidgetRequestWithBody(c.Server, extensionUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatetheDashboardWidget(ctx context.Context, extensionUid string, params *UpdatetheDashboardWidgetParams, body UpdatetheDashboardWidgetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatetheDashboardWidgetRequest(c.Server, extensionUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateawidgetWithBody(ctx context.Context, widgetUid string, params *UpdateawidgetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateawidgetRequestWithBody(c.Server, widgetUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updateawidget(ctx context.Context, widgetUid string, params *UpdateawidgetParams, body UpdateawidgetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateawidgetRequest(c.Server, widgetUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getallglobalfields(ctx context.Context, params *GetallglobalfieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallglobalfieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateaglobalfieldWithBody(ctx context.Context, params *CreateaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateaglobalfieldRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Createaglobalfield(ctx context.Context, params *CreateaglobalfieldParams, body CreateaglobalfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateaglobalfieldRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportaglobalfieldWithBody(ctx context.Context, params *ImportaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportaglobalfieldRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteglobalfield(ctx context.Context, globalFieldUid string, params *DeleteglobalfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteglobalfieldRequest(c.Server, globalFieldUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getasingleglobalfield(ctx context.Context, globalFieldUid GlobalFieldUid, params *GetasingleglobalfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetasingleglobalfieldRequest(c.Server, globalFieldUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateaglobalfieldWithBody(ctx context.Context, globalFieldUid string, params *UpdateaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateaglobalfieldRequestWithBody(c.Server, globalFieldUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updateaglobalfield(ctx context.Context, globalFieldUid string, params *UpdateaglobalfieldParams, body UpdateaglobalfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateaglobalfieldRequest(c.Server, globalFieldUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Exportaglobalfield(ctx context.Context, globalFieldUid string, params *ExportaglobalfieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportaglobalfieldRequest(c.Server, globalFieldUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetafallbacklanguageWithBody(ctx context.Context, params *SetafallbacklanguageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetafallbacklanguageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Setafallbacklanguage(ctx context.Context, params *SetafallbacklanguageParams, body SetafallbacklanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetafallbacklanguageRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetallOrganizations(ctx context.Context, params *GetallOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetasingleOrganization(ctx context.Context, organizationUid OrganizationUid, params *GetasingleOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetasingleOrganizationRequest(c.Server, organizationUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getorganizationlogdetails(ctx context.Context, organizationUid string, params *GetorganizationlogdetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetorganizationlogdetailsRequest(c.Server, organizationUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getorganizationlogitem(ctx context.Context, organizationUid string, logUid LogUid, params *GetorganizationlogitemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetorganizationlogitemRequest(c.Server, organizationUid, logUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetallrolesinanOrganization(ctx context.Context, organizationUid string, params *GetallrolesinanOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallrolesinanOrganizationRequest(c.Server, organizationUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetallOrganizationinvitations(ctx context.Context, organizationUid string, params *GetallOrganizationinvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallOrganizationinvitationsRequest(c.Server, organizationUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdduserstoOrganizationWithBody(ctx context.Context, organizationUid string, params *AdduserstoOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdduserstoOrganizationRequestWithBody(c.Server, organizationUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdduserstoOrganization(ctx context.Context, organizationUid string, params *AdduserstoOrganizationParams, body AdduserstoOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdduserstoOrganizationRequest(c.Server, organizationUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResendpendingOrganizationinvitation(ctx context.Context, organizationUid string, shareUid ShareUid, params *ResendpendingOrganizationinvitationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResendpendingOrganizationinvitationRequest(c.Server, organizationUid, shareUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetallstacksinanOrganization(ctx context.Context, organizationUid string, params *GetallstacksinanOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetallstacksinanOrganizationRequest(c.Server, organizationUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferOrganizationownershipWithBody(ctx context.Context, organizationUid string, params *TransferOrganizationownershipParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferOrganizationownershipRequestWithBody(c.Server, organizationUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferOrganizationownership(ctx context.Context, organizationUid string, params *TransferOrganizationownershipParams, body TransferOrganizationownershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferOrganizationownershipRequest(c.Server, organizationUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletemultipleitemsfromaRelease(ctx context.Context, releaseUid string, params *DeletemultipleitemsfromaReleaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletemultipleitemsfromaReleaseRequest(c.Server, releaseUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletestack(ctx context.Context, params *DeletestackParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletestackRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getasinglestack(ctx context.Context, params *GetasinglestackParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetasinglestackRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatestackWithBody(ctx context.Context, params *CreatestackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatestackRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Createstack(ctx context.Context, params *CreatestackParams, body CreatestackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatestackRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatestackWithBody(ctx context.Context, params *UpdatestackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatestackRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updatestack(ctx context.Context, params *UpdatestackParams, body UpdatestackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatestackRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllUsers(ctx context.Context, params *AllUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Acceptstackownedbyotheruser(ctx context.Context, ownershipToken OwnershipToken, params *AcceptstackownedbyotheruserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptstackownedbyotheruserRequest(c.Server, ownershipToken, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getstacksettings(ctx context.Context, params *GetstacksettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetstacksettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddstacksettingsWithBody(ctx context.Context, params *AddstacksettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddstacksettingsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Addstacksettings(ctx context.Context, params *AddstacksettingsParams, body AddstacksettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddstacksettingsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetstackWithBody(ctx context.Context, params *ResetstackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetstackRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Resetstack(ctx context.Context, params *ResetstackParams, body ResetstackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetstackRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareastackWithBody(ctx context.Context, params *ShareastackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareastackRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Shareastack(ctx context.Context, params *ShareastackParams, body ShareastackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareastackRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferstackownershiptootherusersWithBody(ctx context.Context, params *TransferstackownershiptootherusersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferstackownershiptootherusersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Transferstackownershiptootherusers(ctx context.Context, params *TransferstackownershiptootherusersParams, body TransferstackownershiptootherusersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferstackownershiptootherusersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnshareastackWithBody(ctx context.Context, params *UnshareastackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnshareastackRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Unshareastack(ctx context.Context, params *UnshareastackParams, body UnshareastackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnshareastackRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserRoleWithBody(ctx context.Context, params *UpdateUserRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRoleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserRole(ctx context.Context, params *UpdateUserRoleParams, body UpdateUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRoleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getuser(ctx context.Context, params *GetuserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetuserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateuserWithBody(ctx context.Context, params *UpdateuserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateuserRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updateuser(ctx context.Context, params *UpdateuserParams, body UpdateuserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateuserRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Logoutofyouraccount(ctx context.Context, params *LogoutofyouraccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutofyouraccountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogintoyouraccountWithBody(ctx context.Context, params *LogintoyouraccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogintoyouraccountRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Logintoyouraccount(ctx context.Context, params *LogintoyouraccountParams, body LogintoyouraccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogintoyouraccountRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateauseraccountWithBody(ctx context.Context, userActivationToken UserActivationToken, params *ActivateauseraccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateauseraccountRequestWithBody(c.Server, userActivationToken, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Activateauseraccount(ctx context.Context, userActivationToken UserActivationToken, params *ActivateauseraccountParams, body ActivateauseraccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateauseraccountRequest(c.Server, userActivationToken, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestforapasswordWithBody(ctx context.Context, params *RequestforapasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestforapasswordRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Requestforapassword(ctx context.Context, params *RequestforapasswordParams, body RequestforapasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestforapasswordRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetpasswordWithBody(ctx context.Context, params *ResetpasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetpasswordRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Resetpassword(ctx context.Context, params *ResetpasswordParams, body ResetpasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetpasswordRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetallassetsRequest generates requests for Getallassets
func NewGetallassetsRequest(server string, params *GetallassetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Folder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "folder", runtime.ParamLocationQuery, *params.Folder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeFolders != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_folders", runtime.ParamLocationQuery, *params.IncludeFolders); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludePublishDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_publish_details", runtime.ParamLocationQuery, *params.IncludePublishDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeCount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_count", runtime.ParamLocationQuery, *params.IncludeCount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_urls", runtime.ParamLocationQuery, params.RelativeUrls); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asc_field_uid", runtime.ParamLocationQuery, params.AscFieldUid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "desc_field_uid", runtime.ParamLocationQuery, params.DescFieldUid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewUploadassetRequestWithBody generates requests for Uploadasset with any type of body
func NewUploadassetRequestWithBody(server string, params *UploadassetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_urls", runtime.ParamLocationQuery, params.RelativeUrls); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetanassetSpecificRequest generates requests for GetanassetSpecific
func NewGetanassetSpecificRequest(server string, params *GetanassetSpecificParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_folders", runtime.ParamLocationQuery, params.IncludeFolders); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "folder", runtime.ParamLocationQuery, params.Folder); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewCreateafolderRequest calls the generic Createafolder builder with application/json body
func NewCreateafolderRequest(server string, params *CreateafolderParams, body CreateafolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateafolderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateafolderRequestWithBody generates requests for Createafolder with any type of body
func NewCreateafolderRequestWithBody(server string, params *CreateafolderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/folders/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewDeleteafolderRequest generates requests for Deleteafolder
func NewDeleteafolderRequest(server string, folderUid string, params *DeleteafolderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "folder_uid", runtime.ParamLocationPath, folderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetasinglefolderRequest generates requests for Getasinglefolder
func NewGetasinglefolderRequest(server string, folderUid FolderUid, params *GetasinglefolderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "folder_uid", runtime.ParamLocationPath, folderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_path", runtime.ParamLocationQuery, params.IncludePath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUpdateormovefolderRequest calls the generic Updateormovefolder builder with application/json body
func NewUpdateormovefolderRequest(server string, folderUid string, params *UpdateormovefolderParams, body UpdateormovefolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateormovefolderRequestWithBody(server, folderUid, params, "application/json", bodyReader)
}

// NewUpdateormovefolderRequestWithBody generates requests for Updateormovefolder with any type of body
func NewUpdateormovefolderRequestWithBody(server string, folderUid string, params *UpdateormovefolderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "folder_uid", runtime.ParamLocationPath, folderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetinformationonRTEassetsRequest generates requests for GetinformationonRTEassets
func NewGetinformationonRTEassetsRequest(server string, params *GetinformationonRTEassetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/rt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGeteitheronlyimagesorvideosRequest generates requests for Geteitheronlyimagesorvideos
func NewGeteitheronlyimagesorvideosRequest(server string, assetType AssetType, params *GeteitheronlyimagesorvideosParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_type", runtime.ParamLocationPath, assetType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewDeleteassetRequest generates requests for Deleteasset
func NewDeleteassetRequest(server string, assetUid string, params *DeleteassetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_uid", runtime.ParamLocationPath, assetUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetanassetRequest generates requests for Getanasset
func NewGetanassetRequest(server string, assetUid AssetUid, params *GetanassetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_uid", runtime.ParamLocationPath, assetUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_path", runtime.ParamLocationQuery, params.IncludePath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, params.Version); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment_name", runtime.ParamLocationQuery, params.EnvironmentName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_publish_details", runtime.ParamLocationQuery, params.IncludePublishDetails); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_urls", runtime.ParamLocationQuery, params.RelativeUrls); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewReplaceassetRequest calls the generic Replaceasset builder with application/json body
func NewReplaceassetRequest(server string, assetUid string, params *ReplaceassetParams, body ReplaceassetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceassetRequestWithBody(server, assetUid, params, "application/json", bodyReader)
}

// NewReplaceassetRequestWithBody generates requests for Replaceasset with any type of body
func NewReplaceassetRequestWithBody(server string, assetUid string, params *ReplaceassetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_uid", runtime.ParamLocationPath, assetUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Environment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeUrls != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_urls", runtime.ParamLocationQuery, *params.RelativeUrls); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewPublishanassetRequest calls the generic Publishanasset builder with application/json body
func NewPublishanassetRequest(server string, assetUid string, params *PublishanassetParams, body PublishanassetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishanassetRequestWithBody(server, assetUid, params, "application/json", bodyReader)
}

// NewPublishanassetRequestWithBody generates requests for Publishanasset with any type of body
func NewPublishanassetRequestWithBody(server string, assetUid string, params *PublishanassetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_uid", runtime.ParamLocationPath, assetUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/%s/publish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetassetreferencesRequest generates requests for Getassetreferences
func NewGetassetreferencesRequest(server string, assetUid string, params *GetassetreferencesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_uid", runtime.ParamLocationPath, assetUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/%s/references", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUnpublishanassetRequest calls the generic Unpublishanasset builder with application/json body
func NewUnpublishanassetRequest(server string, assetUid string, params *UnpublishanassetParams, body UnpublishanassetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnpublishanassetRequestWithBody(server, assetUid, params, "application/json", bodyReader)
}

// NewUnpublishanassetRequestWithBody generates requests for Unpublishanasset with any type of body
func NewUnpublishanassetRequestWithBody(server string, assetUid string, params *UnpublishanassetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_uid", runtime.ParamLocationPath, assetUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/%s/unpublish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetDetailsofAllVersionsofanAssetRequest generates requests for GetDetailsofAllVersionsofanAsset
func NewGetDetailsofAllVersionsofanAssetRequest(server string, assetUid string, params *GetDetailsofAllVersionsofanAssetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_uid", runtime.ParamLocationPath, assetUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/%s/versions/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, params.Skip); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "named", runtime.ParamLocationQuery, params.Named); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_count", runtime.ParamLocationQuery, params.IncludeCount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewDeleteVersionNameofAssetRequest generates requests for DeleteVersionNameofAsset
func NewDeleteVersionNameofAssetRequest(server string, assetUid string, versionNumber string, params *DeleteVersionNameofAssetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_uid", runtime.ParamLocationPath, assetUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version_number", runtime.ParamLocationPath, versionNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/%s/versions/%s/name", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewSetVersionNameforAssetRequest calls the generic SetVersionNameforAsset builder with application/json body
func NewSetVersionNameforAssetRequest(server string, assetUid string, versionNumber string, params *SetVersionNameforAssetParams, body SetVersionNameforAssetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetVersionNameforAssetRequestWithBody(server, assetUid, versionNumber, params, "application/json", bodyReader)
}

// NewSetVersionNameforAssetRequestWithBody generates requests for SetVersionNameforAsset with any type of body
func NewSetVersionNameforAssetRequestWithBody(server string, assetUid string, versionNumber string, params *SetVersionNameforAssetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_uid", runtime.ParamLocationPath, assetUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version_number", runtime.ParamLocationPath, versionNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/assets/%s/versions/%s/name", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewDeleteentriesandassetsinbulkRequest calls the generic Deleteentriesandassetsinbulk builder with application/json body
func NewDeleteentriesandassetsinbulkRequest(server string, params *DeleteentriesandassetsinbulkParams, body DeleteentriesandassetsinbulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteentriesandassetsinbulkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeleteentriesandassetsinbulkRequestWithBody generates requests for Deleteentriesandassetsinbulk with any type of body
func NewDeleteentriesandassetsinbulkRequestWithBody(server string, params *DeleteentriesandassetsinbulkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/bulk/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewPublishanentrywithreferencesRequest calls the generic Publishanentrywithreferences builder with application/json body
func NewPublishanentrywithreferencesRequest(server string, params *PublishanentrywithreferencesParams, body PublishanentrywithreferencesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishanentrywithreferencesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPublishanentrywithreferencesRequestWithBody generates requests for Publishanentrywithreferences with any type of body
func NewPublishanentrywithreferencesRequestWithBody(server string, params *PublishanentrywithreferencesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/bulk/publish")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "approvals", runtime.ParamLocationQuery, params.Approvals); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.XBulkAction != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x-bulk-action", runtime.ParamLocationQuery, *params.XBulkAction); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_workflow_stage_check", runtime.ParamLocationQuery, params.SkipWorkflowStageCheck); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUnpublishentriesandassetsinbulkRequest calls the generic Unpublishentriesandassetsinbulk builder with application/json body
func NewUnpublishentriesandassetsinbulkRequest(server string, params *UnpublishentriesandassetsinbulkParams, body UnpublishentriesandassetsinbulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnpublishentriesandassetsinbulkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUnpublishentriesandassetsinbulkRequestWithBody generates requests for Unpublishentriesandassetsinbulk with any type of body
func NewUnpublishentriesandassetsinbulkRequestWithBody(server string, params *UnpublishentriesandassetsinbulkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/bulk/unpublish")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_workflow_stage_check", runtime.ParamLocationQuery, params.SkipWorkflowStageCheck); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "approvals", runtime.ParamLocationQuery, params.Approvals); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUpdateworkflowdetailsinbulkRequest calls the generic Updateworkflowdetailsinbulk builder with application/json body
func NewUpdateworkflowdetailsinbulkRequest(server string, params *UpdateworkflowdetailsinbulkParams, body UpdateworkflowdetailsinbulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateworkflowdetailsinbulkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateworkflowdetailsinbulkRequestWithBody generates requests for Updateworkflowdetailsinbulk with any type of body
func NewUpdateworkflowdetailsinbulkRequestWithBody(server string, params *UpdateworkflowdetailsinbulkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/bulk/workflow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetallcontenttypesRequest generates requests for Getallcontenttypes
func NewGetallcontenttypesRequest(server string, params *GetallcontenttypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_count", runtime.ParamLocationQuery, params.IncludeCount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_global_field_schema", runtime.ParamLocationQuery, params.IncludeGlobalFieldSchema); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewCreateacontenttypeRequest calls the generic Createacontenttype builder with application/json body
func NewCreateacontenttypeRequest(server string, params *CreateacontenttypeParams, body CreateacontenttypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateacontenttypeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateacontenttypeRequestWithBody generates requests for Createacontenttype with any type of body
func NewCreateacontenttypeRequestWithBody(server string, params *CreateacontenttypeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewCreateContentTypewithExtensionFieldRequest calls the generic CreateContentTypewithExtensionField builder with application/json body
func NewCreateContentTypewithExtensionFieldRequest(server string, params *CreateContentTypewithExtensionFieldParams, body CreateContentTypewithExtensionFieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContentTypewithExtensionFieldRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateContentTypewithExtensionFieldRequestWithBody generates requests for CreateContentTypewithExtensionField with any type of body
func NewCreateContentTypewithExtensionFieldRequestWithBody(server string, params *CreateContentTypewithExtensionFieldParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewImportacontenttypeRequestWithBody generates requests for Importacontenttype with any type of body
func NewImportacontenttypeRequestWithBody(server string, params *ImportacontenttypeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "overwrite", runtime.ParamLocationQuery, params.Overwrite); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewDeleteContentTypeRequest generates requests for DeleteContentType
func NewDeleteContentTypeRequest(server string, contentTypeUid string, params *DeleteContentTypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, params.Force); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewGetasinglecontenttypeRequest generates requests for Getasinglecontenttype
func NewGetasinglecontenttypeRequest(server string, contentTypeUid ContentTypeUid, params *GetasinglecontenttypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, params.Version); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_global_field_schema", runtime.ParamLocationQuery, params.IncludeGlobalFieldSchema); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUpdateContentTypeRequest calls the generic UpdateContentType builder with application/json body
func NewUpdateContentTypeRequest(server string, contentTypeUid string, params *UpdateContentTypeParams, body UpdateContentTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContentTypeRequestWithBody(server, contentTypeUid, params, "application/json", bodyReader)
}

// NewUpdateContentTypeRequestWithBody generates requests for UpdateContentType with any type of body
func NewUpdateContentTypeRequestWithBody(server string, contentTypeUid string, params *UpdateContentTypeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewGetallentriesRequest generates requests for Getallentries
func NewGetallentriesRequest(server string, contentTypeUid string, params *GetallentriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_workflow", runtime.ParamLocationQuery, params.IncludeWorkflow); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_publish_details", runtime.ParamLocationQuery, params.IncludePublishDetails); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewCreateanentryRequest calls the generic Createanentry builder with application/json body
func NewCreateanentryRequest(server string, contentTypeUid string, params *CreateanentryParams, body CreateanentryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanentryRequestWithBody(server, contentTypeUid, params, "application/json", bodyReader)
}

// NewCreateanentryRequestWithBody generates requests for Createanentry with any type of body
func NewCreateanentryRequestWithBody(server string, contentTypeUid string, params *CreateanentryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewImportanentryRequestWithBody generates requests for Importanentry with any type of body
func NewImportanentryRequestWithBody(server string, contentTypeUid string, params *ImportanentryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/import", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "overwrite", runtime.ParamLocationQuery, params.Overwrite); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewDeleteanentryRequest generates requests for Deleteanentry
func NewDeleteanentryRequest(server string, contentTypeUid string, entryUid string, params *DeleteanentryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "delete_all_localized", runtime.ParamLocationQuery, params.DeleteAllLocalized); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetasingleentryRequest generates requests for Getasingleentry
func NewGetasingleentryRequest(server string, contentTypeUid string, entryUid EntryUid, params *GetasingleentryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, params.Version); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_workflow", runtime.ParamLocationQuery, params.IncludeWorkflow); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_publish_details", runtime.ParamLocationQuery, params.IncludePublishDetails); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUpdateanentryRequest calls the generic Updateanentry builder with application/json body
func NewUpdateanentryRequest(server string, contentTypeUid string, entryUid string, params *UpdateanentryParams, body UpdateanentryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateanentryRequestWithBody(server, contentTypeUid, entryUid, params, "application/json", bodyReader)
}

// NewUpdateanentryRequestWithBody generates requests for Updateanentry with any type of body
func NewUpdateanentryRequestWithBody(server string, contentTypeUid string, entryUid string, params *UpdateanentryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Locale != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewExportanentryRequest generates requests for Exportanentry
func NewExportanentryRequest(server string, contentTypeUid string, entryUid string, params *ExportanentryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/export", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewImportanexistingentryRequestWithBody generates requests for Importanexistingentry with any type of body
func NewImportanexistingentryRequestWithBody(server string, contentTypeUid string, entryUid string, params *ImportanexistingentryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/import", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "overwrite", runtime.ParamLocationQuery, params.Overwrite); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetlanguagesofanentryRequest generates requests for Getlanguagesofanentry
func NewGetlanguagesofanentryRequest(server string, contentTypeUid string, entryUid string, params *GetlanguagesofanentryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/locales", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewPublishanentryRequest calls the generic Publishanentry builder with application/json body
func NewPublishanentryRequest(server string, contentTypeUid string, entryUid string, params *PublishanentryParams, body PublishanentryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishanentryRequestWithBody(server, contentTypeUid, entryUid, params, "application/json", bodyReader)
}

// NewPublishanentryRequestWithBody generates requests for Publishanentry with any type of body
func NewPublishanentryRequestWithBody(server string, contentTypeUid string, entryUid string, params *PublishanentryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/publish", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetreferencesofanentryRequest generates requests for Getreferencesofanentry
func NewGetreferencesofanentryRequest(server string, contentTypeUid string, entryUid string, params *GetreferencesofanentryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/references", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUnlocalizeanentryRequest calls the generic Unlocalizeanentry builder with application/json body
func NewUnlocalizeanentryRequest(server string, contentTypeUid string, entryUid string, params *UnlocalizeanentryParams, body UnlocalizeanentryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnlocalizeanentryRequestWithBody(server, contentTypeUid, entryUid, params, "application/json", bodyReader)
}

// NewUnlocalizeanentryRequestWithBody generates requests for Unlocalizeanentry with any type of body
func NewUnlocalizeanentryRequestWithBody(server string, contentTypeUid string, entryUid string, params *UnlocalizeanentryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/unlocalize", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUnpublishanentryRequest calls the generic Unpublishanentry builder with application/json body
func NewUnpublishanentryRequest(server string, contentTypeUid string, entryUid string, params *UnpublishanentryParams, body UnpublishanentryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnpublishanentryRequestWithBody(server, contentTypeUid, entryUid, params, "application/json", bodyReader)
}

// NewUnpublishanentryRequestWithBody generates requests for Unpublishanentry with any type of body
func NewUnpublishanentryRequestWithBody(server string, contentTypeUid string, entryUid string, params *UnpublishanentryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/unpublish", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetDetailsofAllVersionsofanEntryRequest generates requests for GetDetailsofAllVersionsofanEntry
func NewGetDetailsofAllVersionsofanEntryRequest(server string, contentTypeUid string, entryUid string, params *GetDetailsofAllVersionsofanEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, params.Skip); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "named", runtime.ParamLocationQuery, params.Named); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_count", runtime.ParamLocationQuery, params.IncludeCount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewDeleteVersionNameofEntryRequest generates requests for DeleteVersionNameofEntry
func NewDeleteVersionNameofEntryRequest(server string, contentTypeUid string, entryUid string, versionNumber string, params *DeleteVersionNameofEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version_number", runtime.ParamLocationPath, versionNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/versions/%s/name", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewSetVersionNameforEntryRequest calls the generic SetVersionNameforEntry builder with application/json body
func NewSetVersionNameforEntryRequest(server string, contentTypeUid string, entryUid string, versionNumber VersionNumber, params *SetVersionNameforEntryParams, body SetVersionNameforEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetVersionNameforEntryRequestWithBody(server, contentTypeUid, entryUid, versionNumber, params, "application/json", bodyReader)
}

// NewSetVersionNameforEntryRequestWithBody generates requests for SetVersionNameforEntry with any type of body
func NewSetVersionNameforEntryRequestWithBody(server string, contentTypeUid string, entryUid string, versionNumber VersionNumber, params *SetVersionNameforEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version_number", runtime.ParamLocationPath, versionNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/versions/%s/name", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewRequestAcceptRejectEntryPublishRequestRequest calls the generic RequestAcceptRejectEntryPublishRequest builder with application/json body
func NewRequestAcceptRejectEntryPublishRequestRequest(server string, contentTypeUid string, entryUid string, params *RequestAcceptRejectEntryPublishRequestParams, body RequestAcceptRejectEntryPublishRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestAcceptRejectEntryPublishRequestRequestWithBody(server, contentTypeUid, entryUid, params, "application/json", bodyReader)
}

// NewRequestAcceptRejectEntryPublishRequestRequestWithBody generates requests for RequestAcceptRejectEntryPublishRequest with any type of body
func NewRequestAcceptRejectEntryPublishRequestRequestWithBody(server string, contentTypeUid string, entryUid string, params *RequestAcceptRejectEntryPublishRequestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entry_uid", runtime.ParamLocationPath, entryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/entries/%s/workflow", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Locale != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewExportacontenttypeRequest generates requests for Exportacontenttype
func NewExportacontenttypeRequest(server string, contentTypeUid string, params *ExportacontenttypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/export", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, params.Version); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetallreferencesofcontenttypeRequest generates requests for Getallreferencesofcontenttype
func NewGetallreferencesofcontenttypeRequest(server string, contentTypeUid string, params *GetallreferencesofcontenttypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content_type_uid", runtime.ParamLocationPath, contentTypeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/content_types/%s/references", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_global_fields", runtime.ParamLocationQuery, params.IncludeGlobalFields); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetallcustomfieldsRequest generates requests for Getallcustomfields
func NewGetallcustomfieldsRequest(server string, params *GetallcustomfieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/extensions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewCreateaDashboardWidgetwithSourceURLRequest calls the generic CreateaDashboardWidgetwithSourceURL builder with application/json body
func NewCreateaDashboardWidgetwithSourceURLRequest(server string, params *CreateaDashboardWidgetwithSourceURLParams, body CreateaDashboardWidgetwithSourceURLJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateaDashboardWidgetwithSourceURLRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateaDashboardWidgetwithSourceURLRequestWithBody generates requests for CreateaDashboardWidgetwithSourceURL with any type of body
func NewCreateaDashboardWidgetwithSourceURLRequestWithBody(server string, params *CreateaDashboardWidgetwithSourceURLParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/extensions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetallwidgetsRequest generates requests for Getallwidgets
func NewGetallwidgetsRequest(server string, params *GetallwidgetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/extensions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Scope != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUploadacustomfieldRequest calls the generic Uploadacustomfield builder with application/json body
func NewUploadacustomfieldRequest(server string, params *UploadacustomfieldParams, body UploadacustomfieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUploadacustomfieldRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUploadacustomfieldRequestWithBody generates requests for Uploadacustomfield with any type of body
func NewUploadacustomfieldRequestWithBody(server string, params *UploadacustomfieldParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/extensions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewDeletecustomfieldRequest generates requests for Deletecustomfield
func NewDeletecustomfieldRequest(server string, customFieldUid string, params *DeletecustomfieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_uid", runtime.ParamLocationPath, customFieldUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetasinglecustomfieldRequest generates requests for Getasinglecustomfield
func NewGetasinglecustomfieldRequest(server string, customFieldUid CustomFieldUid, params *GetasinglecustomfieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_uid", runtime.ParamLocationPath, customFieldUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUpdateacustomfieldRequest calls the generic Updateacustomfield builder with application/json body
func NewUpdateacustomfieldRequest(server string, customFieldUid string, params *UpdateacustomfieldParams, body UpdateacustomfieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateacustomfieldRequestWithBody(server, customFieldUid, params, "application/json", bodyReader)
}

// NewUpdateacustomfieldRequestWithBody generates requests for Updateacustomfield with any type of body
func NewUpdateacustomfieldRequestWithBody(server string, customFieldUid string, params *UpdateacustomfieldParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_uid", runtime.ParamLocationPath, customFieldUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUpdatetheDashboardWidgetRequest calls the generic UpdatetheDashboardWidget builder with application/json body
func NewUpdatetheDashboardWidgetRequest(server string, extensionUid string, params *UpdatetheDashboardWidgetParams, body UpdatetheDashboardWidgetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatetheDashboardWidgetRequestWithBody(server, extensionUid, params, "application/json", bodyReader)
}

// NewUpdatetheDashboardWidgetRequestWithBody generates requests for UpdatetheDashboardWidget with any type of body
func NewUpdatetheDashboardWidgetRequestWithBody(server string, extensionUid string, params *UpdatetheDashboardWidgetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension_uid", runtime.ParamLocationPath, extensionUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewUpdateawidgetRequest calls the generic Updateawidget builder with application/json body
func NewUpdateawidgetRequest(server string, widgetUid string, params *UpdateawidgetParams, body UpdateawidgetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateawidgetRequestWithBody(server, widgetUid, params, "application/json", bodyReader)
}

// NewUpdateawidgetRequestWithBody generates requests for Updateawidget with any type of body
func NewUpdateawidgetRequestWithBody(server string, widgetUid string, params *UpdateawidgetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "widget_uid", runtime.ParamLocationPath, widgetUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewGetallglobalfieldsRequest generates requests for Getallglobalfields
func NewGetallglobalfieldsRequest(server string, params *GetallglobalfieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/global_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewCreateaglobalfieldRequest calls the generic Createaglobalfield builder with application/json body
func NewCreateaglobalfieldRequest(server string, params *CreateaglobalfieldParams, body CreateaglobalfieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateaglobalfieldRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateaglobalfieldRequestWithBody generates requests for Createaglobalfield with any type of body
func NewCreateaglobalfieldRequestWithBody(server string, params *CreateaglobalfieldParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/global_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewImportaglobalfieldRequestWithBody generates requests for Importaglobalfield with any type of body
func NewImportaglobalfieldRequestWithBody(server string, params *ImportaglobalfieldParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/global_fields/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewDeleteglobalfieldRequest generates requests for Deleteglobalfield
func NewDeleteglobalfieldRequest(server string, globalFieldUid string, params *DeleteglobalfieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "global_field_uid", runtime.ParamLocationPath, globalFieldUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/global_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, params.Force); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetasingleglobalfieldRequest generates requests for Getasingleglobalfield
func NewGetasingleglobalfieldRequest(server string, globalFieldUid GlobalFieldUid, params *GetasingleglobalfieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "global_field_uid", runtime.ParamLocationPath, globalFieldUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/global_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUpdateaglobalfieldRequest calls the generic Updateaglobalfield builder with application/json body
func NewUpdateaglobalfieldRequest(server string, globalFieldUid string, params *UpdateaglobalfieldParams, body UpdateaglobalfieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateaglobalfieldRequestWithBody(server, globalFieldUid, params, "application/json", bodyReader)
}

// NewUpdateaglobalfieldRequestWithBody generates requests for Updateaglobalfield with any type of body
func NewUpdateaglobalfieldRequestWithBody(server string, globalFieldUid string, params *UpdateaglobalfieldParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "global_field_uid", runtime.ParamLocationPath, globalFieldUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/global_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewExportaglobalfieldRequest generates requests for Exportaglobalfield
func NewExportaglobalfieldRequest(server string, globalFieldUid string, params *ExportaglobalfieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "global_field_uid", runtime.ParamLocationPath, globalFieldUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/global_fields/%s/export", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewSetafallbacklanguageRequest calls the generic Setafallbacklanguage builder with application/json body
func NewSetafallbacklanguageRequest(server string, params *SetafallbacklanguageParams, body SetafallbacklanguageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetafallbacklanguageRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSetafallbacklanguageRequestWithBody generates requests for Setafallbacklanguage with any type of body
func NewSetafallbacklanguageRequestWithBody(server string, params *SetafallbacklanguageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/locales")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewGetallOrganizationsRequest generates requests for GetallOrganizations
func NewGetallOrganizationsRequest(server string, params *GetallOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, params.Skip); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asc", runtime.ParamLocationQuery, params.Asc); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "desc", runtime.ParamLocationQuery, params.Desc); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_count", runtime.ParamLocationQuery, params.IncludeCount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "typeahead", runtime.ParamLocationQuery, params.Typeahead); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewGetasingleOrganizationRequest generates requests for GetasingleOrganization
func NewGetasingleOrganizationRequest(server string, organizationUid OrganizationUid, params *GetasingleOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_uid", runtime.ParamLocationPath, organizationUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_plan", runtime.ParamLocationQuery, params.IncludePlan); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewGetorganizationlogdetailsRequest generates requests for Getorganizationlogdetails
func NewGetorganizationlogdetailsRequest(server string, organizationUid string, params *GetorganizationlogdetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_uid", runtime.ParamLocationPath, organizationUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewGetorganizationlogitemRequest generates requests for Getorganizationlogitem
func NewGetorganizationlogitemRequest(server string, organizationUid string, logUid LogUid, params *GetorganizationlogitemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_uid", runtime.ParamLocationPath, organizationUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "log_uid", runtime.ParamLocationPath, logUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/logs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewGetallrolesinanOrganizationRequest generates requests for GetallrolesinanOrganization
func NewGetallrolesinanOrganizationRequest(server string, organizationUid string, params *GetallrolesinanOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_uid", runtime.ParamLocationPath, organizationUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, params.Skip); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asc", runtime.ParamLocationQuery, params.Asc); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "desc", runtime.ParamLocationQuery, params.Desc); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_count", runtime.ParamLocationQuery, params.IncludeCount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_stack_roles", runtime.ParamLocationQuery, params.IncludeStackRoles); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewGetallOrganizationinvitationsRequest generates requests for GetallOrganizationinvitations
func NewGetallOrganizationinvitationsRequest(server string, organizationUid string, params *GetallOrganizationinvitationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_uid", runtime.ParamLocationPath, organizationUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/share", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, params.Skip); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asc", runtime.ParamLocationQuery, params.Asc); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "desc", runtime.ParamLocationQuery, params.Desc); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_count", runtime.ParamLocationQuery, params.IncludeCount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_roles", runtime.ParamLocationQuery, params.IncludeRoles); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_invited_by", runtime.ParamLocationQuery, params.IncludeInvitedBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_user_details", runtime.ParamLocationQuery, params.IncludeUserDetails); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "typeahead", runtime.ParamLocationQuery, params.Typeahead); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewAdduserstoOrganizationRequest calls the generic AdduserstoOrganization builder with application/json body
func NewAdduserstoOrganizationRequest(server string, organizationUid string, params *AdduserstoOrganizationParams, body AdduserstoOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdduserstoOrganizationRequestWithBody(server, organizationUid, params, "application/json", bodyReader)
}

// NewAdduserstoOrganizationRequestWithBody generates requests for AdduserstoOrganization with any type of body
func NewAdduserstoOrganizationRequestWithBody(server string, organizationUid string, params *AdduserstoOrganizationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_uid", runtime.ParamLocationPath, organizationUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/share", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewResendpendingOrganizationinvitationRequest generates requests for ResendpendingOrganizationinvitation
func NewResendpendingOrganizationinvitationRequest(server string, organizationUid string, shareUid ShareUid, params *ResendpendingOrganizationinvitationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_uid", runtime.ParamLocationPath, organizationUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "share_uid", runtime.ParamLocationPath, shareUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/share/%s/resend_invitation", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewGetallstacksinanOrganizationRequest generates requests for GetallstacksinanOrganization
func NewGetallstacksinanOrganizationRequest(server string, organizationUid string, params *GetallstacksinanOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_uid", runtime.ParamLocationPath, organizationUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/stacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, params.Skip); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asc", runtime.ParamLocationQuery, params.Asc); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "desc", runtime.ParamLocationQuery, params.Desc); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_count", runtime.ParamLocationQuery, params.IncludeCount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "typeahead", runtime.ParamLocationQuery, params.Typeahead); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewTransferOrganizationownershipRequest calls the generic TransferOrganizationownership builder with application/json body
func NewTransferOrganizationownershipRequest(server string, organizationUid string, params *TransferOrganizationownershipParams, body TransferOrganizationownershipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTransferOrganizationownershipRequestWithBody(server, organizationUid, params, "application/json", bodyReader)
}

// NewTransferOrganizationownershipRequestWithBody generates requests for TransferOrganizationownership with any type of body
func NewTransferOrganizationownershipRequestWithBody(server string, organizationUid string, params *TransferOrganizationownershipParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_uid", runtime.ParamLocationPath, organizationUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/transfer-ownership", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewDeletemultipleitemsfromaReleaseRequest generates requests for DeletemultipleitemsfromaRelease
func NewDeletemultipleitemsfromaReleaseRequest(server string, releaseUid string, params *DeletemultipleitemsfromaReleaseParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "release_uid", runtime.ParamLocationPath, releaseUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/releases/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, params.All); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authorization", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam3)

	return req, nil
}

// NewDeletestackRequest generates requests for Deletestack
func NewDeletestackRequest(server string, params *DeletestackParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetasinglestackRequest generates requests for Getasinglestack
func NewGetasinglestackRequest(server string, params *GetasinglestackParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_collaborators", runtime.ParamLocationQuery, params.IncludeCollaborators); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_stack_variables", runtime.ParamLocationQuery, params.IncludeStackVariables); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_discrete_variables", runtime.ParamLocationQuery, params.IncludeDiscreteVariables); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_count", runtime.ParamLocationQuery, params.IncludeCount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.ApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, *params.ApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("api_key", headerParam0)
	}

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewCreatestackRequest calls the generic Createstack builder with application/json body
func NewCreatestackRequest(server string, params *CreatestackParams, body CreatestackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatestackRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatestackRequestWithBody generates requests for Createstack with any type of body
func NewCreatestackRequestWithBody(server string, params *CreatestackParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "organization_uid", runtime.ParamLocationHeader, params.OrganizationUid)
	if err != nil {
		return nil, err
	}

	req.Header.Set("organization_uid", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUpdatestackRequest calls the generic Updatestack builder with application/json body
func NewUpdatestackRequest(server string, params *UpdatestackParams, body UpdatestackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatestackRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdatestackRequestWithBody generates requests for Updatestack with any type of body
func NewUpdatestackRequestWithBody(server string, params *UpdatestackParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewAllUsersRequest generates requests for AllUsers
func NewAllUsersRequest(server string, params *AllUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_collaborators", runtime.ParamLocationQuery, params.IncludeCollaborators); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewAcceptstackownedbyotheruserRequest generates requests for Acceptstackownedbyotheruser
func NewAcceptstackownedbyotheruserRequest(server string, ownershipToken OwnershipToken, params *AcceptstackownedbyotheruserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ownership_token", runtime.ParamLocationPath, ownershipToken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/accept_ownership/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api_key", runtime.ParamLocationQuery, params.ApiKey); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, params.Uid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	return req, nil
}

// NewGetstacksettingsRequest generates requests for Getstacksettings
func NewGetstacksettingsRequest(server string, params *GetstacksettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewAddstacksettingsRequest calls the generic Addstacksettings builder with application/json body
func NewAddstacksettingsRequest(server string, params *AddstacksettingsParams, body AddstacksettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddstacksettingsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAddstacksettingsRequestWithBody generates requests for Addstacksettings with any type of body
func NewAddstacksettingsRequestWithBody(server string, params *AddstacksettingsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewResetstackRequest calls the generic Resetstack builder with application/json body
func NewResetstackRequest(server string, params *ResetstackParams, body ResetstackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetstackRequestWithBody(server, params, "application/json", bodyReader)
}

// NewResetstackRequestWithBody generates requests for Resetstack with any type of body
func NewResetstackRequestWithBody(server string, params *ResetstackParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/settings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewShareastackRequest calls the generic Shareastack builder with application/json body
func NewShareastackRequest(server string, params *ShareastackParams, body ShareastackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShareastackRequestWithBody(server, params, "application/json", bodyReader)
}

// NewShareastackRequestWithBody generates requests for Shareastack with any type of body
func NewShareastackRequestWithBody(server string, params *ShareastackParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/share")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewTransferstackownershiptootherusersRequest calls the generic Transferstackownershiptootherusers builder with application/json body
func NewTransferstackownershiptootherusersRequest(server string, params *TransferstackownershiptootherusersParams, body TransferstackownershiptootherusersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTransferstackownershiptootherusersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewTransferstackownershiptootherusersRequestWithBody generates requests for Transferstackownershiptootherusers with any type of body
func NewTransferstackownershiptootherusersRequestWithBody(server string, params *TransferstackownershiptootherusersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/transfer_ownership")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUnshareastackRequest calls the generic Unshareastack builder with application/json body
func NewUnshareastackRequest(server string, params *UnshareastackParams, body UnshareastackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnshareastackRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUnshareastackRequestWithBody generates requests for Unshareastack with any type of body
func NewUnshareastackRequestWithBody(server string, params *UnshareastackParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/unshare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewUpdateUserRoleRequest calls the generic UpdateUserRole builder with application/json body
func NewUpdateUserRoleRequest(server string, params *UpdateUserRoleParams, body UpdateUserRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRoleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateUserRoleRequestWithBody generates requests for UpdateUserRole with any type of body
func NewUpdateUserRoleRequestWithBody(server string, params *UpdateUserRoleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/users/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("api_key", headerParam0)

	if params.Authtoken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam2)

	return req, nil
}

// NewGetuserRequest generates requests for Getuser
func NewGetuserRequest(server string, params *GetuserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, params.Authtoken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("authtoken", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewUpdateuserRequest calls the generic Updateuser builder with application/json body
func NewUpdateuserRequest(server string, params *UpdateuserParams, body UpdateuserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateuserRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateuserRequestWithBody generates requests for Updateuser with any type of body
func NewUpdateuserRequestWithBody(server string, params *UpdateuserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewLogoutofyouraccountRequest generates requests for Logoutofyouraccount
func NewLogoutofyouraccountRequest(server string, params *LogoutofyouraccountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/user-session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Authtoken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authtoken", runtime.ParamLocationHeader, *params.Authtoken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authtoken", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam1)

	return req, nil
}

// NewLogintoyouraccountRequest calls the generic Logintoyouraccount builder with application/json body
func NewLogintoyouraccountRequest(server string, params *LogintoyouraccountParams, body LogintoyouraccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogintoyouraccountRequestWithBody(server, params, "application/json", bodyReader)
}

// NewLogintoyouraccountRequestWithBody generates requests for Logintoyouraccount with any type of body
func NewLogintoyouraccountRequestWithBody(server string, params *LogintoyouraccountParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/user-session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	return req, nil
}

// NewActivateauseraccountRequest calls the generic Activateauseraccount builder with application/json body
func NewActivateauseraccountRequest(server string, userActivationToken UserActivationToken, params *ActivateauseraccountParams, body ActivateauseraccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActivateauseraccountRequestWithBody(server, userActivationToken, params, "application/json", bodyReader)
}

// NewActivateauseraccountRequestWithBody generates requests for Activateauseraccount with any type of body
func NewActivateauseraccountRequestWithBody(server string, userActivationToken UserActivationToken, params *ActivateauseraccountParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_activation_token", runtime.ParamLocationPath, userActivationToken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/user/activate/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	return req, nil
}

// NewRequestforapasswordRequest calls the generic Requestforapassword builder with application/json body
func NewRequestforapasswordRequest(server string, params *RequestforapasswordParams, body RequestforapasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestforapasswordRequestWithBody(server, params, "application/json", bodyReader)
}

// NewRequestforapasswordRequestWithBody generates requests for Requestforapassword with any type of body
func NewRequestforapasswordRequestWithBody(server string, params *RequestforapasswordParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/user/forgot_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	return req, nil
}

// NewResetpasswordRequest calls the generic Resetpassword builder with application/json body
func NewResetpasswordRequest(server string, params *ResetpasswordParams, body ResetpasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetpasswordRequestWithBody(server, params, "application/json", bodyReader)
}

// NewResetpasswordRequestWithBody generates requests for Resetpassword with any type of body
func NewResetpasswordRequestWithBody(server string, params *ResetpasswordParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/user/reset_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Getallassets request
	GetallassetsWithResponse(ctx context.Context, params *GetallassetsParams, reqEditors ...RequestEditorFn) (*GetallassetsResponse, error)

	// Uploadasset request with any body
	UploadassetWithBodyWithResponse(ctx context.Context, params *UploadassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadassetResponse, error)

	// GetanassetSpecific request
	GetanassetSpecificWithResponse(ctx context.Context, params *GetanassetSpecificParams, reqEditors ...RequestEditorFn) (*GetanassetSpecificResponse, error)

	// Createafolder request with any body
	CreateafolderWithBodyWithResponse(ctx context.Context, params *CreateafolderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateafolderResponse, error)

	CreateafolderWithResponse(ctx context.Context, params *CreateafolderParams, body CreateafolderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateafolderResponse, error)

	// Deleteafolder request
	DeleteafolderWithResponse(ctx context.Context, folderUid string, params *DeleteafolderParams, reqEditors ...RequestEditorFn) (*DeleteafolderResponse, error)

	// Getasinglefolder request
	GetasinglefolderWithResponse(ctx context.Context, folderUid FolderUid, params *GetasinglefolderParams, reqEditors ...RequestEditorFn) (*GetasinglefolderResponse, error)

	// Updateormovefolder request with any body
	UpdateormovefolderWithBodyWithResponse(ctx context.Context, folderUid string, params *UpdateormovefolderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateormovefolderResponse, error)

	UpdateormovefolderWithResponse(ctx context.Context, folderUid string, params *UpdateormovefolderParams, body UpdateormovefolderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateormovefolderResponse, error)

	// GetinformationonRTEassets request
	GetinformationonRTEassetsWithResponse(ctx context.Context, params *GetinformationonRTEassetsParams, reqEditors ...RequestEditorFn) (*GetinformationonRTEassetsResponse, error)

	// Geteitheronlyimagesorvideos request
	GeteitheronlyimagesorvideosWithResponse(ctx context.Context, assetType AssetType, params *GeteitheronlyimagesorvideosParams, reqEditors ...RequestEditorFn) (*GeteitheronlyimagesorvideosResponse, error)

	// Deleteasset request
	DeleteassetWithResponse(ctx context.Context, assetUid string, params *DeleteassetParams, reqEditors ...RequestEditorFn) (*DeleteassetResponse, error)

	// Getanasset request
	GetanassetWithResponse(ctx context.Context, assetUid AssetUid, params *GetanassetParams, reqEditors ...RequestEditorFn) (*GetanassetResponse, error)

	// Replaceasset request with any body
	ReplaceassetWithBodyWithResponse(ctx context.Context, assetUid string, params *ReplaceassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceassetResponse, error)

	ReplaceassetWithResponse(ctx context.Context, assetUid string, params *ReplaceassetParams, body ReplaceassetJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceassetResponse, error)

	// Publishanasset request with any body
	PublishanassetWithBodyWithResponse(ctx context.Context, assetUid string, params *PublishanassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishanassetResponse, error)

	PublishanassetWithResponse(ctx context.Context, assetUid string, params *PublishanassetParams, body PublishanassetJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishanassetResponse, error)

	// Getassetreferences request
	GetassetreferencesWithResponse(ctx context.Context, assetUid string, params *GetassetreferencesParams, reqEditors ...RequestEditorFn) (*GetassetreferencesResponse, error)

	// Unpublishanasset request with any body
	UnpublishanassetWithBodyWithResponse(ctx context.Context, assetUid string, params *UnpublishanassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnpublishanassetResponse, error)

	UnpublishanassetWithResponse(ctx context.Context, assetUid string, params *UnpublishanassetParams, body UnpublishanassetJSONRequestBody, reqEditors ...RequestEditorFn) (*UnpublishanassetResponse, error)

	// GetDetailsofAllVersionsofanAsset request
	GetDetailsofAllVersionsofanAssetWithResponse(ctx context.Context, assetUid string, params *GetDetailsofAllVersionsofanAssetParams, reqEditors ...RequestEditorFn) (*GetDetailsofAllVersionsofanAssetResponse, error)

	// DeleteVersionNameofAsset request
	DeleteVersionNameofAssetWithResponse(ctx context.Context, assetUid string, versionNumber string, params *DeleteVersionNameofAssetParams, reqEditors ...RequestEditorFn) (*DeleteVersionNameofAssetResponse, error)

	// SetVersionNameforAsset request with any body
	SetVersionNameforAssetWithBodyWithResponse(ctx context.Context, assetUid string, versionNumber string, params *SetVersionNameforAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetVersionNameforAssetResponse, error)

	SetVersionNameforAssetWithResponse(ctx context.Context, assetUid string, versionNumber string, params *SetVersionNameforAssetParams, body SetVersionNameforAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*SetVersionNameforAssetResponse, error)

	// Deleteentriesandassetsinbulk request with any body
	DeleteentriesandassetsinbulkWithBodyWithResponse(ctx context.Context, params *DeleteentriesandassetsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteentriesandassetsinbulkResponse, error)

	DeleteentriesandassetsinbulkWithResponse(ctx context.Context, params *DeleteentriesandassetsinbulkParams, body DeleteentriesandassetsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteentriesandassetsinbulkResponse, error)

	// Publishanentrywithreferences request with any body
	PublishanentrywithreferencesWithBodyWithResponse(ctx context.Context, params *PublishanentrywithreferencesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishanentrywithreferencesResponse, error)

	PublishanentrywithreferencesWithResponse(ctx context.Context, params *PublishanentrywithreferencesParams, body PublishanentrywithreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishanentrywithreferencesResponse, error)

	// Unpublishentriesandassetsinbulk request with any body
	UnpublishentriesandassetsinbulkWithBodyWithResponse(ctx context.Context, params *UnpublishentriesandassetsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnpublishentriesandassetsinbulkResponse, error)

	UnpublishentriesandassetsinbulkWithResponse(ctx context.Context, params *UnpublishentriesandassetsinbulkParams, body UnpublishentriesandassetsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*UnpublishentriesandassetsinbulkResponse, error)

	// Updateworkflowdetailsinbulk request with any body
	UpdateworkflowdetailsinbulkWithBodyWithResponse(ctx context.Context, params *UpdateworkflowdetailsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateworkflowdetailsinbulkResponse, error)

	UpdateworkflowdetailsinbulkWithResponse(ctx context.Context, params *UpdateworkflowdetailsinbulkParams, body UpdateworkflowdetailsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateworkflowdetailsinbulkResponse, error)

	// Getallcontenttypes request
	GetallcontenttypesWithResponse(ctx context.Context, params *GetallcontenttypesParams, reqEditors ...RequestEditorFn) (*GetallcontenttypesResponse, error)

	// Createacontenttype request with any body
	CreateacontenttypeWithBodyWithResponse(ctx context.Context, params *CreateacontenttypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateacontenttypeResponse, error)

	CreateacontenttypeWithResponse(ctx context.Context, params *CreateacontenttypeParams, body CreateacontenttypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateacontenttypeResponse, error)

	// CreateContentTypewithExtensionField request with any body
	CreateContentTypewithExtensionFieldWithBodyWithResponse(ctx context.Context, params *CreateContentTypewithExtensionFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContentTypewithExtensionFieldResponse, error)

	CreateContentTypewithExtensionFieldWithResponse(ctx context.Context, params *CreateContentTypewithExtensionFieldParams, body CreateContentTypewithExtensionFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContentTypewithExtensionFieldResponse, error)

	// Importacontenttype request with any body
	ImportacontenttypeWithBodyWithResponse(ctx context.Context, params *ImportacontenttypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportacontenttypeResponse, error)

	// DeleteContentType request
	DeleteContentTypeWithResponse(ctx context.Context, contentTypeUid string, params *DeleteContentTypeParams, reqEditors ...RequestEditorFn) (*DeleteContentTypeResponse, error)

	// Getasinglecontenttype request
	GetasinglecontenttypeWithResponse(ctx context.Context, contentTypeUid ContentTypeUid, params *GetasinglecontenttypeParams, reqEditors ...RequestEditorFn) (*GetasinglecontenttypeResponse, error)

	// UpdateContentType request with any body
	UpdateContentTypeWithBodyWithResponse(ctx context.Context, contentTypeUid string, params *UpdateContentTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContentTypeResponse, error)

	UpdateContentTypeWithResponse(ctx context.Context, contentTypeUid string, params *UpdateContentTypeParams, body UpdateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContentTypeResponse, error)

	// Getallentries request
	GetallentriesWithResponse(ctx context.Context, contentTypeUid string, params *GetallentriesParams, reqEditors ...RequestEditorFn) (*GetallentriesResponse, error)

	// Createanentry request with any body
	CreateanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, params *CreateanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateanentryResponse, error)

	CreateanentryWithResponse(ctx context.Context, contentTypeUid string, params *CreateanentryParams, body CreateanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateanentryResponse, error)

	// Importanentry request with any body
	ImportanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, params *ImportanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportanentryResponse, error)

	// Deleteanentry request
	DeleteanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *DeleteanentryParams, reqEditors ...RequestEditorFn) (*DeleteanentryResponse, error)

	// Getasingleentry request
	GetasingleentryWithResponse(ctx context.Context, contentTypeUid string, entryUid EntryUid, params *GetasingleentryParams, reqEditors ...RequestEditorFn) (*GetasingleentryResponse, error)

	// Updateanentry request with any body
	UpdateanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UpdateanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateanentryResponse, error)

	UpdateanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UpdateanentryParams, body UpdateanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateanentryResponse, error)

	// Exportanentry request
	ExportanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *ExportanentryParams, reqEditors ...RequestEditorFn) (*ExportanentryResponse, error)

	// Importanexistingentry request with any body
	ImportanexistingentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *ImportanexistingentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportanexistingentryResponse, error)

	// Getlanguagesofanentry request
	GetlanguagesofanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *GetlanguagesofanentryParams, reqEditors ...RequestEditorFn) (*GetlanguagesofanentryResponse, error)

	// Publishanentry request with any body
	PublishanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *PublishanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishanentryResponse, error)

	PublishanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *PublishanentryParams, body PublishanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishanentryResponse, error)

	// Getreferencesofanentry request
	GetreferencesofanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *GetreferencesofanentryParams, reqEditors ...RequestEditorFn) (*GetreferencesofanentryResponse, error)

	// Unlocalizeanentry request with any body
	UnlocalizeanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UnlocalizeanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnlocalizeanentryResponse, error)

	UnlocalizeanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UnlocalizeanentryParams, body UnlocalizeanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*UnlocalizeanentryResponse, error)

	// Unpublishanentry request with any body
	UnpublishanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UnpublishanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnpublishanentryResponse, error)

	UnpublishanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UnpublishanentryParams, body UnpublishanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*UnpublishanentryResponse, error)

	// GetDetailsofAllVersionsofanEntry request
	GetDetailsofAllVersionsofanEntryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *GetDetailsofAllVersionsofanEntryParams, reqEditors ...RequestEditorFn) (*GetDetailsofAllVersionsofanEntryResponse, error)

	// DeleteVersionNameofEntry request
	DeleteVersionNameofEntryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, versionNumber string, params *DeleteVersionNameofEntryParams, reqEditors ...RequestEditorFn) (*DeleteVersionNameofEntryResponse, error)

	// SetVersionNameforEntry request with any body
	SetVersionNameforEntryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, versionNumber VersionNumber, params *SetVersionNameforEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetVersionNameforEntryResponse, error)

	SetVersionNameforEntryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, versionNumber VersionNumber, params *SetVersionNameforEntryParams, body SetVersionNameforEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*SetVersionNameforEntryResponse, error)

	// RequestAcceptRejectEntryPublishRequest request with any body
	RequestAcceptRejectEntryPublishRequestWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *RequestAcceptRejectEntryPublishRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestAcceptRejectEntryPublishRequestResponse, error)

	RequestAcceptRejectEntryPublishRequestWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *RequestAcceptRejectEntryPublishRequestParams, body RequestAcceptRejectEntryPublishRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestAcceptRejectEntryPublishRequestResponse, error)

	// Exportacontenttype request
	ExportacontenttypeWithResponse(ctx context.Context, contentTypeUid string, params *ExportacontenttypeParams, reqEditors ...RequestEditorFn) (*ExportacontenttypeResponse, error)

	// Getallreferencesofcontenttype request
	GetallreferencesofcontenttypeWithResponse(ctx context.Context, contentTypeUid string, params *GetallreferencesofcontenttypeParams, reqEditors ...RequestEditorFn) (*GetallreferencesofcontenttypeResponse, error)

	// Getallcustomfields request
	GetallcustomfieldsWithResponse(ctx context.Context, params *GetallcustomfieldsParams, reqEditors ...RequestEditorFn) (*GetallcustomfieldsResponse, error)

	// CreateaDashboardWidgetwithSourceURL request with any body
	CreateaDashboardWidgetwithSourceURLWithBodyWithResponse(ctx context.Context, params *CreateaDashboardWidgetwithSourceURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateaDashboardWidgetwithSourceURLResponse, error)

	CreateaDashboardWidgetwithSourceURLWithResponse(ctx context.Context, params *CreateaDashboardWidgetwithSourceURLParams, body CreateaDashboardWidgetwithSourceURLJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateaDashboardWidgetwithSourceURLResponse, error)

	// Getallwidgets request
	GetallwidgetsWithResponse(ctx context.Context, params *GetallwidgetsParams, reqEditors ...RequestEditorFn) (*GetallwidgetsResponse, error)

	// Uploadacustomfield request with any body
	UploadacustomfieldWithBodyWithResponse(ctx context.Context, params *UploadacustomfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadacustomfieldResponse, error)

	UploadacustomfieldWithResponse(ctx context.Context, params *UploadacustomfieldParams, body UploadacustomfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadacustomfieldResponse, error)

	// Deletecustomfield request
	DeletecustomfieldWithResponse(ctx context.Context, customFieldUid string, params *DeletecustomfieldParams, reqEditors ...RequestEditorFn) (*DeletecustomfieldResponse, error)

	// Getasinglecustomfield request
	GetasinglecustomfieldWithResponse(ctx context.Context, customFieldUid CustomFieldUid, params *GetasinglecustomfieldParams, reqEditors ...RequestEditorFn) (*GetasinglecustomfieldResponse, error)

	// Updateacustomfield request with any body
	UpdateacustomfieldWithBodyWithResponse(ctx context.Context, customFieldUid string, params *UpdateacustomfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateacustomfieldResponse, error)

	UpdateacustomfieldWithResponse(ctx context.Context, customFieldUid string, params *UpdateacustomfieldParams, body UpdateacustomfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateacustomfieldResponse, error)

	// UpdatetheDashboardWidget request with any body
	UpdatetheDashboardWidgetWithBodyWithResponse(ctx context.Context, extensionUid string, params *UpdatetheDashboardWidgetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatetheDashboardWidgetResponse, error)

	UpdatetheDashboardWidgetWithResponse(ctx context.Context, extensionUid string, params *UpdatetheDashboardWidgetParams, body UpdatetheDashboardWidgetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatetheDashboardWidgetResponse, error)

	// Updateawidget request with any body
	UpdateawidgetWithBodyWithResponse(ctx context.Context, widgetUid string, params *UpdateawidgetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateawidgetResponse, error)

	UpdateawidgetWithResponse(ctx context.Context, widgetUid string, params *UpdateawidgetParams, body UpdateawidgetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateawidgetResponse, error)

	// Getallglobalfields request
	GetallglobalfieldsWithResponse(ctx context.Context, params *GetallglobalfieldsParams, reqEditors ...RequestEditorFn) (*GetallglobalfieldsResponse, error)

	// Createaglobalfield request with any body
	CreateaglobalfieldWithBodyWithResponse(ctx context.Context, params *CreateaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateaglobalfieldResponse, error)

	CreateaglobalfieldWithResponse(ctx context.Context, params *CreateaglobalfieldParams, body CreateaglobalfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateaglobalfieldResponse, error)

	// Importaglobalfield request with any body
	ImportaglobalfieldWithBodyWithResponse(ctx context.Context, params *ImportaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportaglobalfieldResponse, error)

	// Deleteglobalfield request
	DeleteglobalfieldWithResponse(ctx context.Context, globalFieldUid string, params *DeleteglobalfieldParams, reqEditors ...RequestEditorFn) (*DeleteglobalfieldResponse, error)

	// Getasingleglobalfield request
	GetasingleglobalfieldWithResponse(ctx context.Context, globalFieldUid GlobalFieldUid, params *GetasingleglobalfieldParams, reqEditors ...RequestEditorFn) (*GetasingleglobalfieldResponse, error)

	// Updateaglobalfield request with any body
	UpdateaglobalfieldWithBodyWithResponse(ctx context.Context, globalFieldUid string, params *UpdateaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateaglobalfieldResponse, error)

	UpdateaglobalfieldWithResponse(ctx context.Context, globalFieldUid string, params *UpdateaglobalfieldParams, body UpdateaglobalfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateaglobalfieldResponse, error)

	// Exportaglobalfield request
	ExportaglobalfieldWithResponse(ctx context.Context, globalFieldUid string, params *ExportaglobalfieldParams, reqEditors ...RequestEditorFn) (*ExportaglobalfieldResponse, error)

	// Setafallbacklanguage request with any body
	SetafallbacklanguageWithBodyWithResponse(ctx context.Context, params *SetafallbacklanguageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetafallbacklanguageResponse, error)

	SetafallbacklanguageWithResponse(ctx context.Context, params *SetafallbacklanguageParams, body SetafallbacklanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*SetafallbacklanguageResponse, error)

	// GetallOrganizations request
	GetallOrganizationsWithResponse(ctx context.Context, params *GetallOrganizationsParams, reqEditors ...RequestEditorFn) (*GetallOrganizationsResponse, error)

	// GetasingleOrganization request
	GetasingleOrganizationWithResponse(ctx context.Context, organizationUid OrganizationUid, params *GetasingleOrganizationParams, reqEditors ...RequestEditorFn) (*GetasingleOrganizationResponse, error)

	// Getorganizationlogdetails request
	GetorganizationlogdetailsWithResponse(ctx context.Context, organizationUid string, params *GetorganizationlogdetailsParams, reqEditors ...RequestEditorFn) (*GetorganizationlogdetailsResponse, error)

	// Getorganizationlogitem request
	GetorganizationlogitemWithResponse(ctx context.Context, organizationUid string, logUid LogUid, params *GetorganizationlogitemParams, reqEditors ...RequestEditorFn) (*GetorganizationlogitemResponse, error)

	// GetallrolesinanOrganization request
	GetallrolesinanOrganizationWithResponse(ctx context.Context, organizationUid string, params *GetallrolesinanOrganizationParams, reqEditors ...RequestEditorFn) (*GetallrolesinanOrganizationResponse, error)

	// GetallOrganizationinvitations request
	GetallOrganizationinvitationsWithResponse(ctx context.Context, organizationUid string, params *GetallOrganizationinvitationsParams, reqEditors ...RequestEditorFn) (*GetallOrganizationinvitationsResponse, error)

	// AdduserstoOrganization request with any body
	AdduserstoOrganizationWithBodyWithResponse(ctx context.Context, organizationUid string, params *AdduserstoOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdduserstoOrganizationResponse, error)

	AdduserstoOrganizationWithResponse(ctx context.Context, organizationUid string, params *AdduserstoOrganizationParams, body AdduserstoOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*AdduserstoOrganizationResponse, error)

	// ResendpendingOrganizationinvitation request
	ResendpendingOrganizationinvitationWithResponse(ctx context.Context, organizationUid string, shareUid ShareUid, params *ResendpendingOrganizationinvitationParams, reqEditors ...RequestEditorFn) (*ResendpendingOrganizationinvitationResponse, error)

	// GetallstacksinanOrganization request
	GetallstacksinanOrganizationWithResponse(ctx context.Context, organizationUid string, params *GetallstacksinanOrganizationParams, reqEditors ...RequestEditorFn) (*GetallstacksinanOrganizationResponse, error)

	// TransferOrganizationownership request with any body
	TransferOrganizationownershipWithBodyWithResponse(ctx context.Context, organizationUid string, params *TransferOrganizationownershipParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferOrganizationownershipResponse, error)

	TransferOrganizationownershipWithResponse(ctx context.Context, organizationUid string, params *TransferOrganizationownershipParams, body TransferOrganizationownershipJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferOrganizationownershipResponse, error)

	// DeletemultipleitemsfromaRelease request
	DeletemultipleitemsfromaReleaseWithResponse(ctx context.Context, releaseUid string, params *DeletemultipleitemsfromaReleaseParams, reqEditors ...RequestEditorFn) (*DeletemultipleitemsfromaReleaseResponse, error)

	// Deletestack request
	DeletestackWithResponse(ctx context.Context, params *DeletestackParams, reqEditors ...RequestEditorFn) (*DeletestackResponse, error)

	// Getasinglestack request
	GetasinglestackWithResponse(ctx context.Context, params *GetasinglestackParams, reqEditors ...RequestEditorFn) (*GetasinglestackResponse, error)

	// Createstack request with any body
	CreatestackWithBodyWithResponse(ctx context.Context, params *CreatestackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatestackResponse, error)

	CreatestackWithResponse(ctx context.Context, params *CreatestackParams, body CreatestackJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatestackResponse, error)

	// Updatestack request with any body
	UpdatestackWithBodyWithResponse(ctx context.Context, params *UpdatestackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatestackResponse, error)

	UpdatestackWithResponse(ctx context.Context, params *UpdatestackParams, body UpdatestackJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatestackResponse, error)

	// AllUsers request
	AllUsersWithResponse(ctx context.Context, params *AllUsersParams, reqEditors ...RequestEditorFn) (*AllUsersResponse, error)

	// Acceptstackownedbyotheruser request
	AcceptstackownedbyotheruserWithResponse(ctx context.Context, ownershipToken OwnershipToken, params *AcceptstackownedbyotheruserParams, reqEditors ...RequestEditorFn) (*AcceptstackownedbyotheruserResponse, error)

	// Getstacksettings request
	GetstacksettingsWithResponse(ctx context.Context, params *GetstacksettingsParams, reqEditors ...RequestEditorFn) (*GetstacksettingsResponse, error)

	// Addstacksettings request with any body
	AddstacksettingsWithBodyWithResponse(ctx context.Context, params *AddstacksettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddstacksettingsResponse, error)

	AddstacksettingsWithResponse(ctx context.Context, params *AddstacksettingsParams, body AddstacksettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddstacksettingsResponse, error)

	// Resetstack request with any body
	ResetstackWithBodyWithResponse(ctx context.Context, params *ResetstackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetstackResponse, error)

	ResetstackWithResponse(ctx context.Context, params *ResetstackParams, body ResetstackJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetstackResponse, error)

	// Shareastack request with any body
	ShareastackWithBodyWithResponse(ctx context.Context, params *ShareastackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareastackResponse, error)

	ShareastackWithResponse(ctx context.Context, params *ShareastackParams, body ShareastackJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareastackResponse, error)

	// Transferstackownershiptootherusers request with any body
	TransferstackownershiptootherusersWithBodyWithResponse(ctx context.Context, params *TransferstackownershiptootherusersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferstackownershiptootherusersResponse, error)

	TransferstackownershiptootherusersWithResponse(ctx context.Context, params *TransferstackownershiptootherusersParams, body TransferstackownershiptootherusersJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferstackownershiptootherusersResponse, error)

	// Unshareastack request with any body
	UnshareastackWithBodyWithResponse(ctx context.Context, params *UnshareastackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnshareastackResponse, error)

	UnshareastackWithResponse(ctx context.Context, params *UnshareastackParams, body UnshareastackJSONRequestBody, reqEditors ...RequestEditorFn) (*UnshareastackResponse, error)

	// UpdateUserRole request with any body
	UpdateUserRoleWithBodyWithResponse(ctx context.Context, params *UpdateUserRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserRoleResponse, error)

	UpdateUserRoleWithResponse(ctx context.Context, params *UpdateUserRoleParams, body UpdateUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserRoleResponse, error)

	// Getuser request
	GetuserWithResponse(ctx context.Context, params *GetuserParams, reqEditors ...RequestEditorFn) (*GetuserResponse, error)

	// Updateuser request with any body
	UpdateuserWithBodyWithResponse(ctx context.Context, params *UpdateuserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateuserResponse, error)

	UpdateuserWithResponse(ctx context.Context, params *UpdateuserParams, body UpdateuserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateuserResponse, error)

	// Logoutofyouraccount request
	LogoutofyouraccountWithResponse(ctx context.Context, params *LogoutofyouraccountParams, reqEditors ...RequestEditorFn) (*LogoutofyouraccountResponse, error)

	// Logintoyouraccount request with any body
	LogintoyouraccountWithBodyWithResponse(ctx context.Context, params *LogintoyouraccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogintoyouraccountResponse, error)

	LogintoyouraccountWithResponse(ctx context.Context, params *LogintoyouraccountParams, body LogintoyouraccountJSONRequestBody, reqEditors ...RequestEditorFn) (*LogintoyouraccountResponse, error)

	// Activateauseraccount request with any body
	ActivateauseraccountWithBodyWithResponse(ctx context.Context, userActivationToken UserActivationToken, params *ActivateauseraccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateauseraccountResponse, error)

	ActivateauseraccountWithResponse(ctx context.Context, userActivationToken UserActivationToken, params *ActivateauseraccountParams, body ActivateauseraccountJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateauseraccountResponse, error)

	// Requestforapassword request with any body
	RequestforapasswordWithBodyWithResponse(ctx context.Context, params *RequestforapasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestforapasswordResponse, error)

	RequestforapasswordWithResponse(ctx context.Context, params *RequestforapasswordParams, body RequestforapasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestforapasswordResponse, error)

	// Resetpassword request with any body
	ResetpasswordWithBodyWithResponse(ctx context.Context, params *ResetpasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetpasswordResponse, error)

	ResetpasswordWithResponse(ctx context.Context, params *ResetpasswordParams, body ResetpasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetpasswordResponse, error)
}

type GetallassetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallassetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallassetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadassetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UploadassetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadassetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetanassetSpecificResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetanassetSpecificResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetanassetSpecificResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateafolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateafolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateafolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteafolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteafolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteafolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetasinglefolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetasinglefolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetasinglefolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateormovefolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateormovefolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateormovefolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetinformationonRTEassetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetinformationonRTEassetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetinformationonRTEassetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GeteitheronlyimagesorvideosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GeteitheronlyimagesorvideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GeteitheronlyimagesorvideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteassetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteassetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteassetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetanassetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetanassetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetanassetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceassetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceassetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceassetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishanassetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishanassetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishanassetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetassetreferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetassetreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetassetreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnpublishanassetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnpublishanassetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnpublishanassetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDetailsofAllVersionsofanAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDetailsofAllVersionsofanAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDetailsofAllVersionsofanAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVersionNameofAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVersionNameofAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVersionNameofAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetVersionNameforAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetVersionNameforAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetVersionNameforAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteentriesandassetsinbulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteentriesandassetsinbulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteentriesandassetsinbulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishanentrywithreferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishanentrywithreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishanentrywithreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnpublishentriesandassetsinbulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnpublishentriesandassetsinbulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnpublishentriesandassetsinbulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateworkflowdetailsinbulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateworkflowdetailsinbulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateworkflowdetailsinbulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallcontenttypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallcontenttypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallcontenttypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateacontenttypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateacontenttypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateacontenttypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContentTypewithExtensionFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateContentTypewithExtensionFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContentTypewithExtensionFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportacontenttypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ImportacontenttypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportacontenttypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetasinglecontenttypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetasinglecontenttypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetasinglecontenttypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateContentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallentriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallentriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallentriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateanentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportanentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ImportanentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportanentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteanentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteanentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteanentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetasingleentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetasingleentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetasingleentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateanentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateanentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateanentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportanentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportanentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportanentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportanexistingentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ImportanexistingentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportanexistingentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetlanguagesofanentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetlanguagesofanentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetlanguagesofanentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishanentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishanentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishanentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetreferencesofanentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetreferencesofanentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetreferencesofanentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnlocalizeanentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnlocalizeanentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnlocalizeanentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnpublishanentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnpublishanentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnpublishanentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDetailsofAllVersionsofanEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDetailsofAllVersionsofanEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDetailsofAllVersionsofanEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVersionNameofEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVersionNameofEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVersionNameofEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetVersionNameforEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetVersionNameforEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetVersionNameforEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestAcceptRejectEntryPublishRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RequestAcceptRejectEntryPublishRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestAcceptRejectEntryPublishRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportacontenttypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportacontenttypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportacontenttypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallreferencesofcontenttypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallreferencesofcontenttypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallreferencesofcontenttypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallcustomfieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallcustomfieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallcustomfieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateaDashboardWidgetwithSourceURLResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateaDashboardWidgetwithSourceURLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateaDashboardWidgetwithSourceURLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallwidgetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallwidgetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallwidgetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadacustomfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UploadacustomfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadacustomfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletecustomfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletecustomfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletecustomfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetasinglecustomfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetasinglecustomfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetasinglecustomfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateacustomfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateacustomfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateacustomfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatetheDashboardWidgetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatetheDashboardWidgetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatetheDashboardWidgetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateawidgetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateawidgetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateawidgetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallglobalfieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallglobalfieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallglobalfieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateaglobalfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateaglobalfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateaglobalfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportaglobalfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ImportaglobalfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportaglobalfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteglobalfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteglobalfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteglobalfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetasingleglobalfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetasingleglobalfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetasingleglobalfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateaglobalfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateaglobalfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateaglobalfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportaglobalfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportaglobalfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportaglobalfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetafallbacklanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetafallbacklanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetafallbacklanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetasingleOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetasingleOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetasingleOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetorganizationlogdetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetorganizationlogdetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetorganizationlogdetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetorganizationlogitemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetorganizationlogitemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetorganizationlogitemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallrolesinanOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallrolesinanOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallrolesinanOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallOrganizationinvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallOrganizationinvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallOrganizationinvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdduserstoOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AdduserstoOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdduserstoOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResendpendingOrganizationinvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResendpendingOrganizationinvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResendpendingOrganizationinvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetallstacksinanOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetallstacksinanOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetallstacksinanOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransferOrganizationownershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TransferOrganizationownershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransferOrganizationownershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletemultipleitemsfromaReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletemultipleitemsfromaReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletemultipleitemsfromaReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletestackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletestackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletestackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetasinglestackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetasinglestackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetasinglestackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatestackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatestackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatestackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatestackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatestackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatestackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AllUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptstackownedbyotheruserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AcceptstackownedbyotheruserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptstackownedbyotheruserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetstacksettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetstacksettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetstacksettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddstacksettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddstacksettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddstacksettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetstackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetstackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetstackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShareastackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ShareastackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShareastackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransferstackownershiptootherusersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TransferstackownershiptootherusersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransferstackownershiptootherusersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnshareastackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnshareastackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnshareastackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetuserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetuserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetuserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateuserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateuserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateuserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutofyouraccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogoutofyouraccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutofyouraccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogintoyouraccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogintoyouraccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogintoyouraccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateauseraccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ActivateauseraccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateauseraccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestforapasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RequestforapasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestforapasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetpasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetpasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetpasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetallassetsWithResponse request returning *GetallassetsResponse
func (c *ClientWithResponses) GetallassetsWithResponse(ctx context.Context, params *GetallassetsParams, reqEditors ...RequestEditorFn) (*GetallassetsResponse, error) {
	rsp, err := c.Getallassets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallassetsResponse(rsp)
}

// UploadassetWithBodyWithResponse request with arbitrary body returning *UploadassetResponse
func (c *ClientWithResponses) UploadassetWithBodyWithResponse(ctx context.Context, params *UploadassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadassetResponse, error) {
	rsp, err := c.UploadassetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadassetResponse(rsp)
}

// GetanassetSpecificWithResponse request returning *GetanassetSpecificResponse
func (c *ClientWithResponses) GetanassetSpecificWithResponse(ctx context.Context, params *GetanassetSpecificParams, reqEditors ...RequestEditorFn) (*GetanassetSpecificResponse, error) {
	rsp, err := c.GetanassetSpecific(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetanassetSpecificResponse(rsp)
}

// CreateafolderWithBodyWithResponse request with arbitrary body returning *CreateafolderResponse
func (c *ClientWithResponses) CreateafolderWithBodyWithResponse(ctx context.Context, params *CreateafolderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateafolderResponse, error) {
	rsp, err := c.CreateafolderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateafolderResponse(rsp)
}

func (c *ClientWithResponses) CreateafolderWithResponse(ctx context.Context, params *CreateafolderParams, body CreateafolderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateafolderResponse, error) {
	rsp, err := c.Createafolder(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateafolderResponse(rsp)
}

// DeleteafolderWithResponse request returning *DeleteafolderResponse
func (c *ClientWithResponses) DeleteafolderWithResponse(ctx context.Context, folderUid string, params *DeleteafolderParams, reqEditors ...RequestEditorFn) (*DeleteafolderResponse, error) {
	rsp, err := c.Deleteafolder(ctx, folderUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteafolderResponse(rsp)
}

// GetasinglefolderWithResponse request returning *GetasinglefolderResponse
func (c *ClientWithResponses) GetasinglefolderWithResponse(ctx context.Context, folderUid FolderUid, params *GetasinglefolderParams, reqEditors ...RequestEditorFn) (*GetasinglefolderResponse, error) {
	rsp, err := c.Getasinglefolder(ctx, folderUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetasinglefolderResponse(rsp)
}

// UpdateormovefolderWithBodyWithResponse request with arbitrary body returning *UpdateormovefolderResponse
func (c *ClientWithResponses) UpdateormovefolderWithBodyWithResponse(ctx context.Context, folderUid string, params *UpdateormovefolderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateormovefolderResponse, error) {
	rsp, err := c.UpdateormovefolderWithBody(ctx, folderUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateormovefolderResponse(rsp)
}

func (c *ClientWithResponses) UpdateormovefolderWithResponse(ctx context.Context, folderUid string, params *UpdateormovefolderParams, body UpdateormovefolderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateormovefolderResponse, error) {
	rsp, err := c.Updateormovefolder(ctx, folderUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateormovefolderResponse(rsp)
}

// GetinformationonRTEassetsWithResponse request returning *GetinformationonRTEassetsResponse
func (c *ClientWithResponses) GetinformationonRTEassetsWithResponse(ctx context.Context, params *GetinformationonRTEassetsParams, reqEditors ...RequestEditorFn) (*GetinformationonRTEassetsResponse, error) {
	rsp, err := c.GetinformationonRTEassets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetinformationonRTEassetsResponse(rsp)
}

// GeteitheronlyimagesorvideosWithResponse request returning *GeteitheronlyimagesorvideosResponse
func (c *ClientWithResponses) GeteitheronlyimagesorvideosWithResponse(ctx context.Context, assetType AssetType, params *GeteitheronlyimagesorvideosParams, reqEditors ...RequestEditorFn) (*GeteitheronlyimagesorvideosResponse, error) {
	rsp, err := c.Geteitheronlyimagesorvideos(ctx, assetType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGeteitheronlyimagesorvideosResponse(rsp)
}

// DeleteassetWithResponse request returning *DeleteassetResponse
func (c *ClientWithResponses) DeleteassetWithResponse(ctx context.Context, assetUid string, params *DeleteassetParams, reqEditors ...RequestEditorFn) (*DeleteassetResponse, error) {
	rsp, err := c.Deleteasset(ctx, assetUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteassetResponse(rsp)
}

// GetanassetWithResponse request returning *GetanassetResponse
func (c *ClientWithResponses) GetanassetWithResponse(ctx context.Context, assetUid AssetUid, params *GetanassetParams, reqEditors ...RequestEditorFn) (*GetanassetResponse, error) {
	rsp, err := c.Getanasset(ctx, assetUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetanassetResponse(rsp)
}

// ReplaceassetWithBodyWithResponse request with arbitrary body returning *ReplaceassetResponse
func (c *ClientWithResponses) ReplaceassetWithBodyWithResponse(ctx context.Context, assetUid string, params *ReplaceassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceassetResponse, error) {
	rsp, err := c.ReplaceassetWithBody(ctx, assetUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceassetResponse(rsp)
}

func (c *ClientWithResponses) ReplaceassetWithResponse(ctx context.Context, assetUid string, params *ReplaceassetParams, body ReplaceassetJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceassetResponse, error) {
	rsp, err := c.Replaceasset(ctx, assetUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceassetResponse(rsp)
}

// PublishanassetWithBodyWithResponse request with arbitrary body returning *PublishanassetResponse
func (c *ClientWithResponses) PublishanassetWithBodyWithResponse(ctx context.Context, assetUid string, params *PublishanassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishanassetResponse, error) {
	rsp, err := c.PublishanassetWithBody(ctx, assetUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishanassetResponse(rsp)
}

func (c *ClientWithResponses) PublishanassetWithResponse(ctx context.Context, assetUid string, params *PublishanassetParams, body PublishanassetJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishanassetResponse, error) {
	rsp, err := c.Publishanasset(ctx, assetUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishanassetResponse(rsp)
}

// GetassetreferencesWithResponse request returning *GetassetreferencesResponse
func (c *ClientWithResponses) GetassetreferencesWithResponse(ctx context.Context, assetUid string, params *GetassetreferencesParams, reqEditors ...RequestEditorFn) (*GetassetreferencesResponse, error) {
	rsp, err := c.Getassetreferences(ctx, assetUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetassetreferencesResponse(rsp)
}

// UnpublishanassetWithBodyWithResponse request with arbitrary body returning *UnpublishanassetResponse
func (c *ClientWithResponses) UnpublishanassetWithBodyWithResponse(ctx context.Context, assetUid string, params *UnpublishanassetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnpublishanassetResponse, error) {
	rsp, err := c.UnpublishanassetWithBody(ctx, assetUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnpublishanassetResponse(rsp)
}

func (c *ClientWithResponses) UnpublishanassetWithResponse(ctx context.Context, assetUid string, params *UnpublishanassetParams, body UnpublishanassetJSONRequestBody, reqEditors ...RequestEditorFn) (*UnpublishanassetResponse, error) {
	rsp, err := c.Unpublishanasset(ctx, assetUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnpublishanassetResponse(rsp)
}

// GetDetailsofAllVersionsofanAssetWithResponse request returning *GetDetailsofAllVersionsofanAssetResponse
func (c *ClientWithResponses) GetDetailsofAllVersionsofanAssetWithResponse(ctx context.Context, assetUid string, params *GetDetailsofAllVersionsofanAssetParams, reqEditors ...RequestEditorFn) (*GetDetailsofAllVersionsofanAssetResponse, error) {
	rsp, err := c.GetDetailsofAllVersionsofanAsset(ctx, assetUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDetailsofAllVersionsofanAssetResponse(rsp)
}

// DeleteVersionNameofAssetWithResponse request returning *DeleteVersionNameofAssetResponse
func (c *ClientWithResponses) DeleteVersionNameofAssetWithResponse(ctx context.Context, assetUid string, versionNumber string, params *DeleteVersionNameofAssetParams, reqEditors ...RequestEditorFn) (*DeleteVersionNameofAssetResponse, error) {
	rsp, err := c.DeleteVersionNameofAsset(ctx, assetUid, versionNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVersionNameofAssetResponse(rsp)
}

// SetVersionNameforAssetWithBodyWithResponse request with arbitrary body returning *SetVersionNameforAssetResponse
func (c *ClientWithResponses) SetVersionNameforAssetWithBodyWithResponse(ctx context.Context, assetUid string, versionNumber string, params *SetVersionNameforAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetVersionNameforAssetResponse, error) {
	rsp, err := c.SetVersionNameforAssetWithBody(ctx, assetUid, versionNumber, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetVersionNameforAssetResponse(rsp)
}

func (c *ClientWithResponses) SetVersionNameforAssetWithResponse(ctx context.Context, assetUid string, versionNumber string, params *SetVersionNameforAssetParams, body SetVersionNameforAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*SetVersionNameforAssetResponse, error) {
	rsp, err := c.SetVersionNameforAsset(ctx, assetUid, versionNumber, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetVersionNameforAssetResponse(rsp)
}

// DeleteentriesandassetsinbulkWithBodyWithResponse request with arbitrary body returning *DeleteentriesandassetsinbulkResponse
func (c *ClientWithResponses) DeleteentriesandassetsinbulkWithBodyWithResponse(ctx context.Context, params *DeleteentriesandassetsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteentriesandassetsinbulkResponse, error) {
	rsp, err := c.DeleteentriesandassetsinbulkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteentriesandassetsinbulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteentriesandassetsinbulkWithResponse(ctx context.Context, params *DeleteentriesandassetsinbulkParams, body DeleteentriesandassetsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteentriesandassetsinbulkResponse, error) {
	rsp, err := c.Deleteentriesandassetsinbulk(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteentriesandassetsinbulkResponse(rsp)
}

// PublishanentrywithreferencesWithBodyWithResponse request with arbitrary body returning *PublishanentrywithreferencesResponse
func (c *ClientWithResponses) PublishanentrywithreferencesWithBodyWithResponse(ctx context.Context, params *PublishanentrywithreferencesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishanentrywithreferencesResponse, error) {
	rsp, err := c.PublishanentrywithreferencesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishanentrywithreferencesResponse(rsp)
}

func (c *ClientWithResponses) PublishanentrywithreferencesWithResponse(ctx context.Context, params *PublishanentrywithreferencesParams, body PublishanentrywithreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishanentrywithreferencesResponse, error) {
	rsp, err := c.Publishanentrywithreferences(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishanentrywithreferencesResponse(rsp)
}

// UnpublishentriesandassetsinbulkWithBodyWithResponse request with arbitrary body returning *UnpublishentriesandassetsinbulkResponse
func (c *ClientWithResponses) UnpublishentriesandassetsinbulkWithBodyWithResponse(ctx context.Context, params *UnpublishentriesandassetsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnpublishentriesandassetsinbulkResponse, error) {
	rsp, err := c.UnpublishentriesandassetsinbulkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnpublishentriesandassetsinbulkResponse(rsp)
}

func (c *ClientWithResponses) UnpublishentriesandassetsinbulkWithResponse(ctx context.Context, params *UnpublishentriesandassetsinbulkParams, body UnpublishentriesandassetsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*UnpublishentriesandassetsinbulkResponse, error) {
	rsp, err := c.Unpublishentriesandassetsinbulk(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnpublishentriesandassetsinbulkResponse(rsp)
}

// UpdateworkflowdetailsinbulkWithBodyWithResponse request with arbitrary body returning *UpdateworkflowdetailsinbulkResponse
func (c *ClientWithResponses) UpdateworkflowdetailsinbulkWithBodyWithResponse(ctx context.Context, params *UpdateworkflowdetailsinbulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateworkflowdetailsinbulkResponse, error) {
	rsp, err := c.UpdateworkflowdetailsinbulkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateworkflowdetailsinbulkResponse(rsp)
}

func (c *ClientWithResponses) UpdateworkflowdetailsinbulkWithResponse(ctx context.Context, params *UpdateworkflowdetailsinbulkParams, body UpdateworkflowdetailsinbulkJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateworkflowdetailsinbulkResponse, error) {
	rsp, err := c.Updateworkflowdetailsinbulk(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateworkflowdetailsinbulkResponse(rsp)
}

// GetallcontenttypesWithResponse request returning *GetallcontenttypesResponse
func (c *ClientWithResponses) GetallcontenttypesWithResponse(ctx context.Context, params *GetallcontenttypesParams, reqEditors ...RequestEditorFn) (*GetallcontenttypesResponse, error) {
	rsp, err := c.Getallcontenttypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallcontenttypesResponse(rsp)
}

// CreateacontenttypeWithBodyWithResponse request with arbitrary body returning *CreateacontenttypeResponse
func (c *ClientWithResponses) CreateacontenttypeWithBodyWithResponse(ctx context.Context, params *CreateacontenttypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateacontenttypeResponse, error) {
	rsp, err := c.CreateacontenttypeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateacontenttypeResponse(rsp)
}

func (c *ClientWithResponses) CreateacontenttypeWithResponse(ctx context.Context, params *CreateacontenttypeParams, body CreateacontenttypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateacontenttypeResponse, error) {
	rsp, err := c.Createacontenttype(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateacontenttypeResponse(rsp)
}

// CreateContentTypewithExtensionFieldWithBodyWithResponse request with arbitrary body returning *CreateContentTypewithExtensionFieldResponse
func (c *ClientWithResponses) CreateContentTypewithExtensionFieldWithBodyWithResponse(ctx context.Context, params *CreateContentTypewithExtensionFieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContentTypewithExtensionFieldResponse, error) {
	rsp, err := c.CreateContentTypewithExtensionFieldWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContentTypewithExtensionFieldResponse(rsp)
}

func (c *ClientWithResponses) CreateContentTypewithExtensionFieldWithResponse(ctx context.Context, params *CreateContentTypewithExtensionFieldParams, body CreateContentTypewithExtensionFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContentTypewithExtensionFieldResponse, error) {
	rsp, err := c.CreateContentTypewithExtensionField(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContentTypewithExtensionFieldResponse(rsp)
}

// ImportacontenttypeWithBodyWithResponse request with arbitrary body returning *ImportacontenttypeResponse
func (c *ClientWithResponses) ImportacontenttypeWithBodyWithResponse(ctx context.Context, params *ImportacontenttypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportacontenttypeResponse, error) {
	rsp, err := c.ImportacontenttypeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportacontenttypeResponse(rsp)
}

// DeleteContentTypeWithResponse request returning *DeleteContentTypeResponse
func (c *ClientWithResponses) DeleteContentTypeWithResponse(ctx context.Context, contentTypeUid string, params *DeleteContentTypeParams, reqEditors ...RequestEditorFn) (*DeleteContentTypeResponse, error) {
	rsp, err := c.DeleteContentType(ctx, contentTypeUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContentTypeResponse(rsp)
}

// GetasinglecontenttypeWithResponse request returning *GetasinglecontenttypeResponse
func (c *ClientWithResponses) GetasinglecontenttypeWithResponse(ctx context.Context, contentTypeUid ContentTypeUid, params *GetasinglecontenttypeParams, reqEditors ...RequestEditorFn) (*GetasinglecontenttypeResponse, error) {
	rsp, err := c.Getasinglecontenttype(ctx, contentTypeUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetasinglecontenttypeResponse(rsp)
}

// UpdateContentTypeWithBodyWithResponse request with arbitrary body returning *UpdateContentTypeResponse
func (c *ClientWithResponses) UpdateContentTypeWithBodyWithResponse(ctx context.Context, contentTypeUid string, params *UpdateContentTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContentTypeResponse, error) {
	rsp, err := c.UpdateContentTypeWithBody(ctx, contentTypeUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContentTypeResponse(rsp)
}

func (c *ClientWithResponses) UpdateContentTypeWithResponse(ctx context.Context, contentTypeUid string, params *UpdateContentTypeParams, body UpdateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContentTypeResponse, error) {
	rsp, err := c.UpdateContentType(ctx, contentTypeUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContentTypeResponse(rsp)
}

// GetallentriesWithResponse request returning *GetallentriesResponse
func (c *ClientWithResponses) GetallentriesWithResponse(ctx context.Context, contentTypeUid string, params *GetallentriesParams, reqEditors ...RequestEditorFn) (*GetallentriesResponse, error) {
	rsp, err := c.Getallentries(ctx, contentTypeUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallentriesResponse(rsp)
}

// CreateanentryWithBodyWithResponse request with arbitrary body returning *CreateanentryResponse
func (c *ClientWithResponses) CreateanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, params *CreateanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateanentryResponse, error) {
	rsp, err := c.CreateanentryWithBody(ctx, contentTypeUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateanentryResponse(rsp)
}

func (c *ClientWithResponses) CreateanentryWithResponse(ctx context.Context, contentTypeUid string, params *CreateanentryParams, body CreateanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateanentryResponse, error) {
	rsp, err := c.Createanentry(ctx, contentTypeUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateanentryResponse(rsp)
}

// ImportanentryWithBodyWithResponse request with arbitrary body returning *ImportanentryResponse
func (c *ClientWithResponses) ImportanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, params *ImportanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportanentryResponse, error) {
	rsp, err := c.ImportanentryWithBody(ctx, contentTypeUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportanentryResponse(rsp)
}

// DeleteanentryWithResponse request returning *DeleteanentryResponse
func (c *ClientWithResponses) DeleteanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *DeleteanentryParams, reqEditors ...RequestEditorFn) (*DeleteanentryResponse, error) {
	rsp, err := c.Deleteanentry(ctx, contentTypeUid, entryUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteanentryResponse(rsp)
}

// GetasingleentryWithResponse request returning *GetasingleentryResponse
func (c *ClientWithResponses) GetasingleentryWithResponse(ctx context.Context, contentTypeUid string, entryUid EntryUid, params *GetasingleentryParams, reqEditors ...RequestEditorFn) (*GetasingleentryResponse, error) {
	rsp, err := c.Getasingleentry(ctx, contentTypeUid, entryUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetasingleentryResponse(rsp)
}

// UpdateanentryWithBodyWithResponse request with arbitrary body returning *UpdateanentryResponse
func (c *ClientWithResponses) UpdateanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UpdateanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateanentryResponse, error) {
	rsp, err := c.UpdateanentryWithBody(ctx, contentTypeUid, entryUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateanentryResponse(rsp)
}

func (c *ClientWithResponses) UpdateanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UpdateanentryParams, body UpdateanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateanentryResponse, error) {
	rsp, err := c.Updateanentry(ctx, contentTypeUid, entryUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateanentryResponse(rsp)
}

// ExportanentryWithResponse request returning *ExportanentryResponse
func (c *ClientWithResponses) ExportanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *ExportanentryParams, reqEditors ...RequestEditorFn) (*ExportanentryResponse, error) {
	rsp, err := c.Exportanentry(ctx, contentTypeUid, entryUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportanentryResponse(rsp)
}

// ImportanexistingentryWithBodyWithResponse request with arbitrary body returning *ImportanexistingentryResponse
func (c *ClientWithResponses) ImportanexistingentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *ImportanexistingentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportanexistingentryResponse, error) {
	rsp, err := c.ImportanexistingentryWithBody(ctx, contentTypeUid, entryUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportanexistingentryResponse(rsp)
}

// GetlanguagesofanentryWithResponse request returning *GetlanguagesofanentryResponse
func (c *ClientWithResponses) GetlanguagesofanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *GetlanguagesofanentryParams, reqEditors ...RequestEditorFn) (*GetlanguagesofanentryResponse, error) {
	rsp, err := c.Getlanguagesofanentry(ctx, contentTypeUid, entryUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetlanguagesofanentryResponse(rsp)
}

// PublishanentryWithBodyWithResponse request with arbitrary body returning *PublishanentryResponse
func (c *ClientWithResponses) PublishanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *PublishanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishanentryResponse, error) {
	rsp, err := c.PublishanentryWithBody(ctx, contentTypeUid, entryUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishanentryResponse(rsp)
}

func (c *ClientWithResponses) PublishanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *PublishanentryParams, body PublishanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishanentryResponse, error) {
	rsp, err := c.Publishanentry(ctx, contentTypeUid, entryUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishanentryResponse(rsp)
}

// GetreferencesofanentryWithResponse request returning *GetreferencesofanentryResponse
func (c *ClientWithResponses) GetreferencesofanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *GetreferencesofanentryParams, reqEditors ...RequestEditorFn) (*GetreferencesofanentryResponse, error) {
	rsp, err := c.Getreferencesofanentry(ctx, contentTypeUid, entryUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetreferencesofanentryResponse(rsp)
}

// UnlocalizeanentryWithBodyWithResponse request with arbitrary body returning *UnlocalizeanentryResponse
func (c *ClientWithResponses) UnlocalizeanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UnlocalizeanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnlocalizeanentryResponse, error) {
	rsp, err := c.UnlocalizeanentryWithBody(ctx, contentTypeUid, entryUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnlocalizeanentryResponse(rsp)
}

func (c *ClientWithResponses) UnlocalizeanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UnlocalizeanentryParams, body UnlocalizeanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*UnlocalizeanentryResponse, error) {
	rsp, err := c.Unlocalizeanentry(ctx, contentTypeUid, entryUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnlocalizeanentryResponse(rsp)
}

// UnpublishanentryWithBodyWithResponse request with arbitrary body returning *UnpublishanentryResponse
func (c *ClientWithResponses) UnpublishanentryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UnpublishanentryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnpublishanentryResponse, error) {
	rsp, err := c.UnpublishanentryWithBody(ctx, contentTypeUid, entryUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnpublishanentryResponse(rsp)
}

func (c *ClientWithResponses) UnpublishanentryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *UnpublishanentryParams, body UnpublishanentryJSONRequestBody, reqEditors ...RequestEditorFn) (*UnpublishanentryResponse, error) {
	rsp, err := c.Unpublishanentry(ctx, contentTypeUid, entryUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnpublishanentryResponse(rsp)
}

// GetDetailsofAllVersionsofanEntryWithResponse request returning *GetDetailsofAllVersionsofanEntryResponse
func (c *ClientWithResponses) GetDetailsofAllVersionsofanEntryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *GetDetailsofAllVersionsofanEntryParams, reqEditors ...RequestEditorFn) (*GetDetailsofAllVersionsofanEntryResponse, error) {
	rsp, err := c.GetDetailsofAllVersionsofanEntry(ctx, contentTypeUid, entryUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDetailsofAllVersionsofanEntryResponse(rsp)
}

// DeleteVersionNameofEntryWithResponse request returning *DeleteVersionNameofEntryResponse
func (c *ClientWithResponses) DeleteVersionNameofEntryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, versionNumber string, params *DeleteVersionNameofEntryParams, reqEditors ...RequestEditorFn) (*DeleteVersionNameofEntryResponse, error) {
	rsp, err := c.DeleteVersionNameofEntry(ctx, contentTypeUid, entryUid, versionNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVersionNameofEntryResponse(rsp)
}

// SetVersionNameforEntryWithBodyWithResponse request with arbitrary body returning *SetVersionNameforEntryResponse
func (c *ClientWithResponses) SetVersionNameforEntryWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, versionNumber VersionNumber, params *SetVersionNameforEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetVersionNameforEntryResponse, error) {
	rsp, err := c.SetVersionNameforEntryWithBody(ctx, contentTypeUid, entryUid, versionNumber, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetVersionNameforEntryResponse(rsp)
}

func (c *ClientWithResponses) SetVersionNameforEntryWithResponse(ctx context.Context, contentTypeUid string, entryUid string, versionNumber VersionNumber, params *SetVersionNameforEntryParams, body SetVersionNameforEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*SetVersionNameforEntryResponse, error) {
	rsp, err := c.SetVersionNameforEntry(ctx, contentTypeUid, entryUid, versionNumber, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetVersionNameforEntryResponse(rsp)
}

// RequestAcceptRejectEntryPublishRequestWithBodyWithResponse request with arbitrary body returning *RequestAcceptRejectEntryPublishRequestResponse
func (c *ClientWithResponses) RequestAcceptRejectEntryPublishRequestWithBodyWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *RequestAcceptRejectEntryPublishRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestAcceptRejectEntryPublishRequestResponse, error) {
	rsp, err := c.RequestAcceptRejectEntryPublishRequestWithBody(ctx, contentTypeUid, entryUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestAcceptRejectEntryPublishRequestResponse(rsp)
}

func (c *ClientWithResponses) RequestAcceptRejectEntryPublishRequestWithResponse(ctx context.Context, contentTypeUid string, entryUid string, params *RequestAcceptRejectEntryPublishRequestParams, body RequestAcceptRejectEntryPublishRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestAcceptRejectEntryPublishRequestResponse, error) {
	rsp, err := c.RequestAcceptRejectEntryPublishRequest(ctx, contentTypeUid, entryUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestAcceptRejectEntryPublishRequestResponse(rsp)
}

// ExportacontenttypeWithResponse request returning *ExportacontenttypeResponse
func (c *ClientWithResponses) ExportacontenttypeWithResponse(ctx context.Context, contentTypeUid string, params *ExportacontenttypeParams, reqEditors ...RequestEditorFn) (*ExportacontenttypeResponse, error) {
	rsp, err := c.Exportacontenttype(ctx, contentTypeUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportacontenttypeResponse(rsp)
}

// GetallreferencesofcontenttypeWithResponse request returning *GetallreferencesofcontenttypeResponse
func (c *ClientWithResponses) GetallreferencesofcontenttypeWithResponse(ctx context.Context, contentTypeUid string, params *GetallreferencesofcontenttypeParams, reqEditors ...RequestEditorFn) (*GetallreferencesofcontenttypeResponse, error) {
	rsp, err := c.Getallreferencesofcontenttype(ctx, contentTypeUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallreferencesofcontenttypeResponse(rsp)
}

// GetallcustomfieldsWithResponse request returning *GetallcustomfieldsResponse
func (c *ClientWithResponses) GetallcustomfieldsWithResponse(ctx context.Context, params *GetallcustomfieldsParams, reqEditors ...RequestEditorFn) (*GetallcustomfieldsResponse, error) {
	rsp, err := c.Getallcustomfields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallcustomfieldsResponse(rsp)
}

// CreateaDashboardWidgetwithSourceURLWithBodyWithResponse request with arbitrary body returning *CreateaDashboardWidgetwithSourceURLResponse
func (c *ClientWithResponses) CreateaDashboardWidgetwithSourceURLWithBodyWithResponse(ctx context.Context, params *CreateaDashboardWidgetwithSourceURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateaDashboardWidgetwithSourceURLResponse, error) {
	rsp, err := c.CreateaDashboardWidgetwithSourceURLWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateaDashboardWidgetwithSourceURLResponse(rsp)
}

func (c *ClientWithResponses) CreateaDashboardWidgetwithSourceURLWithResponse(ctx context.Context, params *CreateaDashboardWidgetwithSourceURLParams, body CreateaDashboardWidgetwithSourceURLJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateaDashboardWidgetwithSourceURLResponse, error) {
	rsp, err := c.CreateaDashboardWidgetwithSourceURL(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateaDashboardWidgetwithSourceURLResponse(rsp)
}

// GetallwidgetsWithResponse request returning *GetallwidgetsResponse
func (c *ClientWithResponses) GetallwidgetsWithResponse(ctx context.Context, params *GetallwidgetsParams, reqEditors ...RequestEditorFn) (*GetallwidgetsResponse, error) {
	rsp, err := c.Getallwidgets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallwidgetsResponse(rsp)
}

// UploadacustomfieldWithBodyWithResponse request with arbitrary body returning *UploadacustomfieldResponse
func (c *ClientWithResponses) UploadacustomfieldWithBodyWithResponse(ctx context.Context, params *UploadacustomfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadacustomfieldResponse, error) {
	rsp, err := c.UploadacustomfieldWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadacustomfieldResponse(rsp)
}

func (c *ClientWithResponses) UploadacustomfieldWithResponse(ctx context.Context, params *UploadacustomfieldParams, body UploadacustomfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadacustomfieldResponse, error) {
	rsp, err := c.Uploadacustomfield(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadacustomfieldResponse(rsp)
}

// DeletecustomfieldWithResponse request returning *DeletecustomfieldResponse
func (c *ClientWithResponses) DeletecustomfieldWithResponse(ctx context.Context, customFieldUid string, params *DeletecustomfieldParams, reqEditors ...RequestEditorFn) (*DeletecustomfieldResponse, error) {
	rsp, err := c.Deletecustomfield(ctx, customFieldUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecustomfieldResponse(rsp)
}

// GetasinglecustomfieldWithResponse request returning *GetasinglecustomfieldResponse
func (c *ClientWithResponses) GetasinglecustomfieldWithResponse(ctx context.Context, customFieldUid CustomFieldUid, params *GetasinglecustomfieldParams, reqEditors ...RequestEditorFn) (*GetasinglecustomfieldResponse, error) {
	rsp, err := c.Getasinglecustomfield(ctx, customFieldUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetasinglecustomfieldResponse(rsp)
}

// UpdateacustomfieldWithBodyWithResponse request with arbitrary body returning *UpdateacustomfieldResponse
func (c *ClientWithResponses) UpdateacustomfieldWithBodyWithResponse(ctx context.Context, customFieldUid string, params *UpdateacustomfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateacustomfieldResponse, error) {
	rsp, err := c.UpdateacustomfieldWithBody(ctx, customFieldUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateacustomfieldResponse(rsp)
}

func (c *ClientWithResponses) UpdateacustomfieldWithResponse(ctx context.Context, customFieldUid string, params *UpdateacustomfieldParams, body UpdateacustomfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateacustomfieldResponse, error) {
	rsp, err := c.Updateacustomfield(ctx, customFieldUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateacustomfieldResponse(rsp)
}

// UpdatetheDashboardWidgetWithBodyWithResponse request with arbitrary body returning *UpdatetheDashboardWidgetResponse
func (c *ClientWithResponses) UpdatetheDashboardWidgetWithBodyWithResponse(ctx context.Context, extensionUid string, params *UpdatetheDashboardWidgetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatetheDashboardWidgetResponse, error) {
	rsp, err := c.UpdatetheDashboardWidgetWithBody(ctx, extensionUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatetheDashboardWidgetResponse(rsp)
}

func (c *ClientWithResponses) UpdatetheDashboardWidgetWithResponse(ctx context.Context, extensionUid string, params *UpdatetheDashboardWidgetParams, body UpdatetheDashboardWidgetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatetheDashboardWidgetResponse, error) {
	rsp, err := c.UpdatetheDashboardWidget(ctx, extensionUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatetheDashboardWidgetResponse(rsp)
}

// UpdateawidgetWithBodyWithResponse request with arbitrary body returning *UpdateawidgetResponse
func (c *ClientWithResponses) UpdateawidgetWithBodyWithResponse(ctx context.Context, widgetUid string, params *UpdateawidgetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateawidgetResponse, error) {
	rsp, err := c.UpdateawidgetWithBody(ctx, widgetUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateawidgetResponse(rsp)
}

func (c *ClientWithResponses) UpdateawidgetWithResponse(ctx context.Context, widgetUid string, params *UpdateawidgetParams, body UpdateawidgetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateawidgetResponse, error) {
	rsp, err := c.Updateawidget(ctx, widgetUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateawidgetResponse(rsp)
}

// GetallglobalfieldsWithResponse request returning *GetallglobalfieldsResponse
func (c *ClientWithResponses) GetallglobalfieldsWithResponse(ctx context.Context, params *GetallglobalfieldsParams, reqEditors ...RequestEditorFn) (*GetallglobalfieldsResponse, error) {
	rsp, err := c.Getallglobalfields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallglobalfieldsResponse(rsp)
}

// CreateaglobalfieldWithBodyWithResponse request with arbitrary body returning *CreateaglobalfieldResponse
func (c *ClientWithResponses) CreateaglobalfieldWithBodyWithResponse(ctx context.Context, params *CreateaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateaglobalfieldResponse, error) {
	rsp, err := c.CreateaglobalfieldWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateaglobalfieldResponse(rsp)
}

func (c *ClientWithResponses) CreateaglobalfieldWithResponse(ctx context.Context, params *CreateaglobalfieldParams, body CreateaglobalfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateaglobalfieldResponse, error) {
	rsp, err := c.Createaglobalfield(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateaglobalfieldResponse(rsp)
}

// ImportaglobalfieldWithBodyWithResponse request with arbitrary body returning *ImportaglobalfieldResponse
func (c *ClientWithResponses) ImportaglobalfieldWithBodyWithResponse(ctx context.Context, params *ImportaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportaglobalfieldResponse, error) {
	rsp, err := c.ImportaglobalfieldWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportaglobalfieldResponse(rsp)
}

// DeleteglobalfieldWithResponse request returning *DeleteglobalfieldResponse
func (c *ClientWithResponses) DeleteglobalfieldWithResponse(ctx context.Context, globalFieldUid string, params *DeleteglobalfieldParams, reqEditors ...RequestEditorFn) (*DeleteglobalfieldResponse, error) {
	rsp, err := c.Deleteglobalfield(ctx, globalFieldUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteglobalfieldResponse(rsp)
}

// GetasingleglobalfieldWithResponse request returning *GetasingleglobalfieldResponse
func (c *ClientWithResponses) GetasingleglobalfieldWithResponse(ctx context.Context, globalFieldUid GlobalFieldUid, params *GetasingleglobalfieldParams, reqEditors ...RequestEditorFn) (*GetasingleglobalfieldResponse, error) {
	rsp, err := c.Getasingleglobalfield(ctx, globalFieldUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetasingleglobalfieldResponse(rsp)
}

// UpdateaglobalfieldWithBodyWithResponse request with arbitrary body returning *UpdateaglobalfieldResponse
func (c *ClientWithResponses) UpdateaglobalfieldWithBodyWithResponse(ctx context.Context, globalFieldUid string, params *UpdateaglobalfieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateaglobalfieldResponse, error) {
	rsp, err := c.UpdateaglobalfieldWithBody(ctx, globalFieldUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateaglobalfieldResponse(rsp)
}

func (c *ClientWithResponses) UpdateaglobalfieldWithResponse(ctx context.Context, globalFieldUid string, params *UpdateaglobalfieldParams, body UpdateaglobalfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateaglobalfieldResponse, error) {
	rsp, err := c.Updateaglobalfield(ctx, globalFieldUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateaglobalfieldResponse(rsp)
}

// ExportaglobalfieldWithResponse request returning *ExportaglobalfieldResponse
func (c *ClientWithResponses) ExportaglobalfieldWithResponse(ctx context.Context, globalFieldUid string, params *ExportaglobalfieldParams, reqEditors ...RequestEditorFn) (*ExportaglobalfieldResponse, error) {
	rsp, err := c.Exportaglobalfield(ctx, globalFieldUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportaglobalfieldResponse(rsp)
}

// SetafallbacklanguageWithBodyWithResponse request with arbitrary body returning *SetafallbacklanguageResponse
func (c *ClientWithResponses) SetafallbacklanguageWithBodyWithResponse(ctx context.Context, params *SetafallbacklanguageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetafallbacklanguageResponse, error) {
	rsp, err := c.SetafallbacklanguageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetafallbacklanguageResponse(rsp)
}

func (c *ClientWithResponses) SetafallbacklanguageWithResponse(ctx context.Context, params *SetafallbacklanguageParams, body SetafallbacklanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*SetafallbacklanguageResponse, error) {
	rsp, err := c.Setafallbacklanguage(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetafallbacklanguageResponse(rsp)
}

// GetallOrganizationsWithResponse request returning *GetallOrganizationsResponse
func (c *ClientWithResponses) GetallOrganizationsWithResponse(ctx context.Context, params *GetallOrganizationsParams, reqEditors ...RequestEditorFn) (*GetallOrganizationsResponse, error) {
	rsp, err := c.GetallOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallOrganizationsResponse(rsp)
}

// GetasingleOrganizationWithResponse request returning *GetasingleOrganizationResponse
func (c *ClientWithResponses) GetasingleOrganizationWithResponse(ctx context.Context, organizationUid OrganizationUid, params *GetasingleOrganizationParams, reqEditors ...RequestEditorFn) (*GetasingleOrganizationResponse, error) {
	rsp, err := c.GetasingleOrganization(ctx, organizationUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetasingleOrganizationResponse(rsp)
}

// GetorganizationlogdetailsWithResponse request returning *GetorganizationlogdetailsResponse
func (c *ClientWithResponses) GetorganizationlogdetailsWithResponse(ctx context.Context, organizationUid string, params *GetorganizationlogdetailsParams, reqEditors ...RequestEditorFn) (*GetorganizationlogdetailsResponse, error) {
	rsp, err := c.Getorganizationlogdetails(ctx, organizationUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetorganizationlogdetailsResponse(rsp)
}

// GetorganizationlogitemWithResponse request returning *GetorganizationlogitemResponse
func (c *ClientWithResponses) GetorganizationlogitemWithResponse(ctx context.Context, organizationUid string, logUid LogUid, params *GetorganizationlogitemParams, reqEditors ...RequestEditorFn) (*GetorganizationlogitemResponse, error) {
	rsp, err := c.Getorganizationlogitem(ctx, organizationUid, logUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetorganizationlogitemResponse(rsp)
}

// GetallrolesinanOrganizationWithResponse request returning *GetallrolesinanOrganizationResponse
func (c *ClientWithResponses) GetallrolesinanOrganizationWithResponse(ctx context.Context, organizationUid string, params *GetallrolesinanOrganizationParams, reqEditors ...RequestEditorFn) (*GetallrolesinanOrganizationResponse, error) {
	rsp, err := c.GetallrolesinanOrganization(ctx, organizationUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallrolesinanOrganizationResponse(rsp)
}

// GetallOrganizationinvitationsWithResponse request returning *GetallOrganizationinvitationsResponse
func (c *ClientWithResponses) GetallOrganizationinvitationsWithResponse(ctx context.Context, organizationUid string, params *GetallOrganizationinvitationsParams, reqEditors ...RequestEditorFn) (*GetallOrganizationinvitationsResponse, error) {
	rsp, err := c.GetallOrganizationinvitations(ctx, organizationUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallOrganizationinvitationsResponse(rsp)
}

// AdduserstoOrganizationWithBodyWithResponse request with arbitrary body returning *AdduserstoOrganizationResponse
func (c *ClientWithResponses) AdduserstoOrganizationWithBodyWithResponse(ctx context.Context, organizationUid string, params *AdduserstoOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdduserstoOrganizationResponse, error) {
	rsp, err := c.AdduserstoOrganizationWithBody(ctx, organizationUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdduserstoOrganizationResponse(rsp)
}

func (c *ClientWithResponses) AdduserstoOrganizationWithResponse(ctx context.Context, organizationUid string, params *AdduserstoOrganizationParams, body AdduserstoOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*AdduserstoOrganizationResponse, error) {
	rsp, err := c.AdduserstoOrganization(ctx, organizationUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdduserstoOrganizationResponse(rsp)
}

// ResendpendingOrganizationinvitationWithResponse request returning *ResendpendingOrganizationinvitationResponse
func (c *ClientWithResponses) ResendpendingOrganizationinvitationWithResponse(ctx context.Context, organizationUid string, shareUid ShareUid, params *ResendpendingOrganizationinvitationParams, reqEditors ...RequestEditorFn) (*ResendpendingOrganizationinvitationResponse, error) {
	rsp, err := c.ResendpendingOrganizationinvitation(ctx, organizationUid, shareUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResendpendingOrganizationinvitationResponse(rsp)
}

// GetallstacksinanOrganizationWithResponse request returning *GetallstacksinanOrganizationResponse
func (c *ClientWithResponses) GetallstacksinanOrganizationWithResponse(ctx context.Context, organizationUid string, params *GetallstacksinanOrganizationParams, reqEditors ...RequestEditorFn) (*GetallstacksinanOrganizationResponse, error) {
	rsp, err := c.GetallstacksinanOrganization(ctx, organizationUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetallstacksinanOrganizationResponse(rsp)
}

// TransferOrganizationownershipWithBodyWithResponse request with arbitrary body returning *TransferOrganizationownershipResponse
func (c *ClientWithResponses) TransferOrganizationownershipWithBodyWithResponse(ctx context.Context, organizationUid string, params *TransferOrganizationownershipParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferOrganizationownershipResponse, error) {
	rsp, err := c.TransferOrganizationownershipWithBody(ctx, organizationUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferOrganizationownershipResponse(rsp)
}

func (c *ClientWithResponses) TransferOrganizationownershipWithResponse(ctx context.Context, organizationUid string, params *TransferOrganizationownershipParams, body TransferOrganizationownershipJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferOrganizationownershipResponse, error) {
	rsp, err := c.TransferOrganizationownership(ctx, organizationUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferOrganizationownershipResponse(rsp)
}

// DeletemultipleitemsfromaReleaseWithResponse request returning *DeletemultipleitemsfromaReleaseResponse
func (c *ClientWithResponses) DeletemultipleitemsfromaReleaseWithResponse(ctx context.Context, releaseUid string, params *DeletemultipleitemsfromaReleaseParams, reqEditors ...RequestEditorFn) (*DeletemultipleitemsfromaReleaseResponse, error) {
	rsp, err := c.DeletemultipleitemsfromaRelease(ctx, releaseUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletemultipleitemsfromaReleaseResponse(rsp)
}

// DeletestackWithResponse request returning *DeletestackResponse
func (c *ClientWithResponses) DeletestackWithResponse(ctx context.Context, params *DeletestackParams, reqEditors ...RequestEditorFn) (*DeletestackResponse, error) {
	rsp, err := c.Deletestack(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletestackResponse(rsp)
}

// GetasinglestackWithResponse request returning *GetasinglestackResponse
func (c *ClientWithResponses) GetasinglestackWithResponse(ctx context.Context, params *GetasinglestackParams, reqEditors ...RequestEditorFn) (*GetasinglestackResponse, error) {
	rsp, err := c.Getasinglestack(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetasinglestackResponse(rsp)
}

// CreatestackWithBodyWithResponse request with arbitrary body returning *CreatestackResponse
func (c *ClientWithResponses) CreatestackWithBodyWithResponse(ctx context.Context, params *CreatestackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatestackResponse, error) {
	rsp, err := c.CreatestackWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatestackResponse(rsp)
}

func (c *ClientWithResponses) CreatestackWithResponse(ctx context.Context, params *CreatestackParams, body CreatestackJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatestackResponse, error) {
	rsp, err := c.Createstack(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatestackResponse(rsp)
}

// UpdatestackWithBodyWithResponse request with arbitrary body returning *UpdatestackResponse
func (c *ClientWithResponses) UpdatestackWithBodyWithResponse(ctx context.Context, params *UpdatestackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatestackResponse, error) {
	rsp, err := c.UpdatestackWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatestackResponse(rsp)
}

func (c *ClientWithResponses) UpdatestackWithResponse(ctx context.Context, params *UpdatestackParams, body UpdatestackJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatestackResponse, error) {
	rsp, err := c.Updatestack(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatestackResponse(rsp)
}

// AllUsersWithResponse request returning *AllUsersResponse
func (c *ClientWithResponses) AllUsersWithResponse(ctx context.Context, params *AllUsersParams, reqEditors ...RequestEditorFn) (*AllUsersResponse, error) {
	rsp, err := c.AllUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllUsersResponse(rsp)
}

// AcceptstackownedbyotheruserWithResponse request returning *AcceptstackownedbyotheruserResponse
func (c *ClientWithResponses) AcceptstackownedbyotheruserWithResponse(ctx context.Context, ownershipToken OwnershipToken, params *AcceptstackownedbyotheruserParams, reqEditors ...RequestEditorFn) (*AcceptstackownedbyotheruserResponse, error) {
	rsp, err := c.Acceptstackownedbyotheruser(ctx, ownershipToken, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptstackownedbyotheruserResponse(rsp)
}

// GetstacksettingsWithResponse request returning *GetstacksettingsResponse
func (c *ClientWithResponses) GetstacksettingsWithResponse(ctx context.Context, params *GetstacksettingsParams, reqEditors ...RequestEditorFn) (*GetstacksettingsResponse, error) {
	rsp, err := c.Getstacksettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetstacksettingsResponse(rsp)
}

// AddstacksettingsWithBodyWithResponse request with arbitrary body returning *AddstacksettingsResponse
func (c *ClientWithResponses) AddstacksettingsWithBodyWithResponse(ctx context.Context, params *AddstacksettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddstacksettingsResponse, error) {
	rsp, err := c.AddstacksettingsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddstacksettingsResponse(rsp)
}

func (c *ClientWithResponses) AddstacksettingsWithResponse(ctx context.Context, params *AddstacksettingsParams, body AddstacksettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddstacksettingsResponse, error) {
	rsp, err := c.Addstacksettings(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddstacksettingsResponse(rsp)
}

// ResetstackWithBodyWithResponse request with arbitrary body returning *ResetstackResponse
func (c *ClientWithResponses) ResetstackWithBodyWithResponse(ctx context.Context, params *ResetstackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetstackResponse, error) {
	rsp, err := c.ResetstackWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetstackResponse(rsp)
}

func (c *ClientWithResponses) ResetstackWithResponse(ctx context.Context, params *ResetstackParams, body ResetstackJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetstackResponse, error) {
	rsp, err := c.Resetstack(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetstackResponse(rsp)
}

// ShareastackWithBodyWithResponse request with arbitrary body returning *ShareastackResponse
func (c *ClientWithResponses) ShareastackWithBodyWithResponse(ctx context.Context, params *ShareastackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareastackResponse, error) {
	rsp, err := c.ShareastackWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareastackResponse(rsp)
}

func (c *ClientWithResponses) ShareastackWithResponse(ctx context.Context, params *ShareastackParams, body ShareastackJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareastackResponse, error) {
	rsp, err := c.Shareastack(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareastackResponse(rsp)
}

// TransferstackownershiptootherusersWithBodyWithResponse request with arbitrary body returning *TransferstackownershiptootherusersResponse
func (c *ClientWithResponses) TransferstackownershiptootherusersWithBodyWithResponse(ctx context.Context, params *TransferstackownershiptootherusersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferstackownershiptootherusersResponse, error) {
	rsp, err := c.TransferstackownershiptootherusersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferstackownershiptootherusersResponse(rsp)
}

func (c *ClientWithResponses) TransferstackownershiptootherusersWithResponse(ctx context.Context, params *TransferstackownershiptootherusersParams, body TransferstackownershiptootherusersJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferstackownershiptootherusersResponse, error) {
	rsp, err := c.Transferstackownershiptootherusers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferstackownershiptootherusersResponse(rsp)
}

// UnshareastackWithBodyWithResponse request with arbitrary body returning *UnshareastackResponse
func (c *ClientWithResponses) UnshareastackWithBodyWithResponse(ctx context.Context, params *UnshareastackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnshareastackResponse, error) {
	rsp, err := c.UnshareastackWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnshareastackResponse(rsp)
}

func (c *ClientWithResponses) UnshareastackWithResponse(ctx context.Context, params *UnshareastackParams, body UnshareastackJSONRequestBody, reqEditors ...RequestEditorFn) (*UnshareastackResponse, error) {
	rsp, err := c.Unshareastack(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnshareastackResponse(rsp)
}

// UpdateUserRoleWithBodyWithResponse request with arbitrary body returning *UpdateUserRoleResponse
func (c *ClientWithResponses) UpdateUserRoleWithBodyWithResponse(ctx context.Context, params *UpdateUserRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserRoleResponse, error) {
	rsp, err := c.UpdateUserRoleWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserRoleWithResponse(ctx context.Context, params *UpdateUserRoleParams, body UpdateUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserRoleResponse, error) {
	rsp, err := c.UpdateUserRole(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserRoleResponse(rsp)
}

// GetuserWithResponse request returning *GetuserResponse
func (c *ClientWithResponses) GetuserWithResponse(ctx context.Context, params *GetuserParams, reqEditors ...RequestEditorFn) (*GetuserResponse, error) {
	rsp, err := c.Getuser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetuserResponse(rsp)
}

// UpdateuserWithBodyWithResponse request with arbitrary body returning *UpdateuserResponse
func (c *ClientWithResponses) UpdateuserWithBodyWithResponse(ctx context.Context, params *UpdateuserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateuserResponse, error) {
	rsp, err := c.UpdateuserWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateuserResponse(rsp)
}

func (c *ClientWithResponses) UpdateuserWithResponse(ctx context.Context, params *UpdateuserParams, body UpdateuserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateuserResponse, error) {
	rsp, err := c.Updateuser(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateuserResponse(rsp)
}

// LogoutofyouraccountWithResponse request returning *LogoutofyouraccountResponse
func (c *ClientWithResponses) LogoutofyouraccountWithResponse(ctx context.Context, params *LogoutofyouraccountParams, reqEditors ...RequestEditorFn) (*LogoutofyouraccountResponse, error) {
	rsp, err := c.Logoutofyouraccount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutofyouraccountResponse(rsp)
}

// LogintoyouraccountWithBodyWithResponse request with arbitrary body returning *LogintoyouraccountResponse
func (c *ClientWithResponses) LogintoyouraccountWithBodyWithResponse(ctx context.Context, params *LogintoyouraccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogintoyouraccountResponse, error) {
	rsp, err := c.LogintoyouraccountWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogintoyouraccountResponse(rsp)
}

func (c *ClientWithResponses) LogintoyouraccountWithResponse(ctx context.Context, params *LogintoyouraccountParams, body LogintoyouraccountJSONRequestBody, reqEditors ...RequestEditorFn) (*LogintoyouraccountResponse, error) {
	rsp, err := c.Logintoyouraccount(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogintoyouraccountResponse(rsp)
}

// ActivateauseraccountWithBodyWithResponse request with arbitrary body returning *ActivateauseraccountResponse
func (c *ClientWithResponses) ActivateauseraccountWithBodyWithResponse(ctx context.Context, userActivationToken UserActivationToken, params *ActivateauseraccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateauseraccountResponse, error) {
	rsp, err := c.ActivateauseraccountWithBody(ctx, userActivationToken, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateauseraccountResponse(rsp)
}

func (c *ClientWithResponses) ActivateauseraccountWithResponse(ctx context.Context, userActivationToken UserActivationToken, params *ActivateauseraccountParams, body ActivateauseraccountJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateauseraccountResponse, error) {
	rsp, err := c.Activateauseraccount(ctx, userActivationToken, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateauseraccountResponse(rsp)
}

// RequestforapasswordWithBodyWithResponse request with arbitrary body returning *RequestforapasswordResponse
func (c *ClientWithResponses) RequestforapasswordWithBodyWithResponse(ctx context.Context, params *RequestforapasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestforapasswordResponse, error) {
	rsp, err := c.RequestforapasswordWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestforapasswordResponse(rsp)
}

func (c *ClientWithResponses) RequestforapasswordWithResponse(ctx context.Context, params *RequestforapasswordParams, body RequestforapasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestforapasswordResponse, error) {
	rsp, err := c.Requestforapassword(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestforapasswordResponse(rsp)
}

// ResetpasswordWithBodyWithResponse request with arbitrary body returning *ResetpasswordResponse
func (c *ClientWithResponses) ResetpasswordWithBodyWithResponse(ctx context.Context, params *ResetpasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetpasswordResponse, error) {
	rsp, err := c.ResetpasswordWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetpasswordResponse(rsp)
}

func (c *ClientWithResponses) ResetpasswordWithResponse(ctx context.Context, params *ResetpasswordParams, body ResetpasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetpasswordResponse, error) {
	rsp, err := c.Resetpassword(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetpasswordResponse(rsp)
}

// ParseGetallassetsResponse parses an HTTP response from a GetallassetsWithResponse call
func ParseGetallassetsResponse(rsp *http.Response) (*GetallassetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallassetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadassetResponse parses an HTTP response from a UploadassetWithResponse call
func ParseUploadassetResponse(rsp *http.Response) (*UploadassetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UploadassetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetanassetSpecificResponse parses an HTTP response from a GetanassetSpecificWithResponse call
func ParseGetanassetSpecificResponse(rsp *http.Response) (*GetanassetSpecificResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetanassetSpecificResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateafolderResponse parses an HTTP response from a CreateafolderWithResponse call
func ParseCreateafolderResponse(rsp *http.Response) (*CreateafolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateafolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteafolderResponse parses an HTTP response from a DeleteafolderWithResponse call
func ParseDeleteafolderResponse(rsp *http.Response) (*DeleteafolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteafolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetasinglefolderResponse parses an HTTP response from a GetasinglefolderWithResponse call
func ParseGetasinglefolderResponse(rsp *http.Response) (*GetasinglefolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetasinglefolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateormovefolderResponse parses an HTTP response from a UpdateormovefolderWithResponse call
func ParseUpdateormovefolderResponse(rsp *http.Response) (*UpdateormovefolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateormovefolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetinformationonRTEassetsResponse parses an HTTP response from a GetinformationonRTEassetsWithResponse call
func ParseGetinformationonRTEassetsResponse(rsp *http.Response) (*GetinformationonRTEassetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetinformationonRTEassetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGeteitheronlyimagesorvideosResponse parses an HTTP response from a GeteitheronlyimagesorvideosWithResponse call
func ParseGeteitheronlyimagesorvideosResponse(rsp *http.Response) (*GeteitheronlyimagesorvideosResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GeteitheronlyimagesorvideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteassetResponse parses an HTTP response from a DeleteassetWithResponse call
func ParseDeleteassetResponse(rsp *http.Response) (*DeleteassetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteassetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetanassetResponse parses an HTTP response from a GetanassetWithResponse call
func ParseGetanassetResponse(rsp *http.Response) (*GetanassetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetanassetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceassetResponse parses an HTTP response from a ReplaceassetWithResponse call
func ParseReplaceassetResponse(rsp *http.Response) (*ReplaceassetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplaceassetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePublishanassetResponse parses an HTTP response from a PublishanassetWithResponse call
func ParsePublishanassetResponse(rsp *http.Response) (*PublishanassetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PublishanassetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetassetreferencesResponse parses an HTTP response from a GetassetreferencesWithResponse call
func ParseGetassetreferencesResponse(rsp *http.Response) (*GetassetreferencesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetassetreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnpublishanassetResponse parses an HTTP response from a UnpublishanassetWithResponse call
func ParseUnpublishanassetResponse(rsp *http.Response) (*UnpublishanassetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UnpublishanassetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDetailsofAllVersionsofanAssetResponse parses an HTTP response from a GetDetailsofAllVersionsofanAssetWithResponse call
func ParseGetDetailsofAllVersionsofanAssetResponse(rsp *http.Response) (*GetDetailsofAllVersionsofanAssetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDetailsofAllVersionsofanAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteVersionNameofAssetResponse parses an HTTP response from a DeleteVersionNameofAssetWithResponse call
func ParseDeleteVersionNameofAssetResponse(rsp *http.Response) (*DeleteVersionNameofAssetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVersionNameofAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetVersionNameforAssetResponse parses an HTTP response from a SetVersionNameforAssetWithResponse call
func ParseSetVersionNameforAssetResponse(rsp *http.Response) (*SetVersionNameforAssetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SetVersionNameforAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteentriesandassetsinbulkResponse parses an HTTP response from a DeleteentriesandassetsinbulkWithResponse call
func ParseDeleteentriesandassetsinbulkResponse(rsp *http.Response) (*DeleteentriesandassetsinbulkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteentriesandassetsinbulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePublishanentrywithreferencesResponse parses an HTTP response from a PublishanentrywithreferencesWithResponse call
func ParsePublishanentrywithreferencesResponse(rsp *http.Response) (*PublishanentrywithreferencesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PublishanentrywithreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnpublishentriesandassetsinbulkResponse parses an HTTP response from a UnpublishentriesandassetsinbulkWithResponse call
func ParseUnpublishentriesandassetsinbulkResponse(rsp *http.Response) (*UnpublishentriesandassetsinbulkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UnpublishentriesandassetsinbulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateworkflowdetailsinbulkResponse parses an HTTP response from a UpdateworkflowdetailsinbulkWithResponse call
func ParseUpdateworkflowdetailsinbulkResponse(rsp *http.Response) (*UpdateworkflowdetailsinbulkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateworkflowdetailsinbulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallcontenttypesResponse parses an HTTP response from a GetallcontenttypesWithResponse call
func ParseGetallcontenttypesResponse(rsp *http.Response) (*GetallcontenttypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallcontenttypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateacontenttypeResponse parses an HTTP response from a CreateacontenttypeWithResponse call
func ParseCreateacontenttypeResponse(rsp *http.Response) (*CreateacontenttypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateacontenttypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateContentTypewithExtensionFieldResponse parses an HTTP response from a CreateContentTypewithExtensionFieldWithResponse call
func ParseCreateContentTypewithExtensionFieldResponse(rsp *http.Response) (*CreateContentTypewithExtensionFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateContentTypewithExtensionFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseImportacontenttypeResponse parses an HTTP response from a ImportacontenttypeWithResponse call
func ParseImportacontenttypeResponse(rsp *http.Response) (*ImportacontenttypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ImportacontenttypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteContentTypeResponse parses an HTTP response from a DeleteContentTypeWithResponse call
func ParseDeleteContentTypeResponse(rsp *http.Response) (*DeleteContentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteContentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetasinglecontenttypeResponse parses an HTTP response from a GetasinglecontenttypeWithResponse call
func ParseGetasinglecontenttypeResponse(rsp *http.Response) (*GetasinglecontenttypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetasinglecontenttypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateContentTypeResponse parses an HTTP response from a UpdateContentTypeWithResponse call
func ParseUpdateContentTypeResponse(rsp *http.Response) (*UpdateContentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateContentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallentriesResponse parses an HTTP response from a GetallentriesWithResponse call
func ParseGetallentriesResponse(rsp *http.Response) (*GetallentriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallentriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateanentryResponse parses an HTTP response from a CreateanentryWithResponse call
func ParseCreateanentryResponse(rsp *http.Response) (*CreateanentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseImportanentryResponse parses an HTTP response from a ImportanentryWithResponse call
func ParseImportanentryResponse(rsp *http.Response) (*ImportanentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ImportanentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteanentryResponse parses an HTTP response from a DeleteanentryWithResponse call
func ParseDeleteanentryResponse(rsp *http.Response) (*DeleteanentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteanentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetasingleentryResponse parses an HTTP response from a GetasingleentryWithResponse call
func ParseGetasingleentryResponse(rsp *http.Response) (*GetasingleentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetasingleentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateanentryResponse parses an HTTP response from a UpdateanentryWithResponse call
func ParseUpdateanentryResponse(rsp *http.Response) (*UpdateanentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateanentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExportanentryResponse parses an HTTP response from a ExportanentryWithResponse call
func ParseExportanentryResponse(rsp *http.Response) (*ExportanentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExportanentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseImportanexistingentryResponse parses an HTTP response from a ImportanexistingentryWithResponse call
func ParseImportanexistingentryResponse(rsp *http.Response) (*ImportanexistingentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ImportanexistingentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetlanguagesofanentryResponse parses an HTTP response from a GetlanguagesofanentryWithResponse call
func ParseGetlanguagesofanentryResponse(rsp *http.Response) (*GetlanguagesofanentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetlanguagesofanentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePublishanentryResponse parses an HTTP response from a PublishanentryWithResponse call
func ParsePublishanentryResponse(rsp *http.Response) (*PublishanentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PublishanentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetreferencesofanentryResponse parses an HTTP response from a GetreferencesofanentryWithResponse call
func ParseGetreferencesofanentryResponse(rsp *http.Response) (*GetreferencesofanentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetreferencesofanentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnlocalizeanentryResponse parses an HTTP response from a UnlocalizeanentryWithResponse call
func ParseUnlocalizeanentryResponse(rsp *http.Response) (*UnlocalizeanentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UnlocalizeanentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnpublishanentryResponse parses an HTTP response from a UnpublishanentryWithResponse call
func ParseUnpublishanentryResponse(rsp *http.Response) (*UnpublishanentryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UnpublishanentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDetailsofAllVersionsofanEntryResponse parses an HTTP response from a GetDetailsofAllVersionsofanEntryWithResponse call
func ParseGetDetailsofAllVersionsofanEntryResponse(rsp *http.Response) (*GetDetailsofAllVersionsofanEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDetailsofAllVersionsofanEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteVersionNameofEntryResponse parses an HTTP response from a DeleteVersionNameofEntryWithResponse call
func ParseDeleteVersionNameofEntryResponse(rsp *http.Response) (*DeleteVersionNameofEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVersionNameofEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetVersionNameforEntryResponse parses an HTTP response from a SetVersionNameforEntryWithResponse call
func ParseSetVersionNameforEntryResponse(rsp *http.Response) (*SetVersionNameforEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SetVersionNameforEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRequestAcceptRejectEntryPublishRequestResponse parses an HTTP response from a RequestAcceptRejectEntryPublishRequestWithResponse call
func ParseRequestAcceptRejectEntryPublishRequestResponse(rsp *http.Response) (*RequestAcceptRejectEntryPublishRequestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RequestAcceptRejectEntryPublishRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExportacontenttypeResponse parses an HTTP response from a ExportacontenttypeWithResponse call
func ParseExportacontenttypeResponse(rsp *http.Response) (*ExportacontenttypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExportacontenttypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallreferencesofcontenttypeResponse parses an HTTP response from a GetallreferencesofcontenttypeWithResponse call
func ParseGetallreferencesofcontenttypeResponse(rsp *http.Response) (*GetallreferencesofcontenttypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallreferencesofcontenttypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallcustomfieldsResponse parses an HTTP response from a GetallcustomfieldsWithResponse call
func ParseGetallcustomfieldsResponse(rsp *http.Response) (*GetallcustomfieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallcustomfieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateaDashboardWidgetwithSourceURLResponse parses an HTTP response from a CreateaDashboardWidgetwithSourceURLWithResponse call
func ParseCreateaDashboardWidgetwithSourceURLResponse(rsp *http.Response) (*CreateaDashboardWidgetwithSourceURLResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateaDashboardWidgetwithSourceURLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallwidgetsResponse parses an HTTP response from a GetallwidgetsWithResponse call
func ParseGetallwidgetsResponse(rsp *http.Response) (*GetallwidgetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallwidgetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadacustomfieldResponse parses an HTTP response from a UploadacustomfieldWithResponse call
func ParseUploadacustomfieldResponse(rsp *http.Response) (*UploadacustomfieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UploadacustomfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletecustomfieldResponse parses an HTTP response from a DeletecustomfieldWithResponse call
func ParseDeletecustomfieldResponse(rsp *http.Response) (*DeletecustomfieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletecustomfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetasinglecustomfieldResponse parses an HTTP response from a GetasinglecustomfieldWithResponse call
func ParseGetasinglecustomfieldResponse(rsp *http.Response) (*GetasinglecustomfieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetasinglecustomfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateacustomfieldResponse parses an HTTP response from a UpdateacustomfieldWithResponse call
func ParseUpdateacustomfieldResponse(rsp *http.Response) (*UpdateacustomfieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateacustomfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatetheDashboardWidgetResponse parses an HTTP response from a UpdatetheDashboardWidgetWithResponse call
func ParseUpdatetheDashboardWidgetResponse(rsp *http.Response) (*UpdatetheDashboardWidgetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatetheDashboardWidgetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateawidgetResponse parses an HTTP response from a UpdateawidgetWithResponse call
func ParseUpdateawidgetResponse(rsp *http.Response) (*UpdateawidgetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateawidgetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallglobalfieldsResponse parses an HTTP response from a GetallglobalfieldsWithResponse call
func ParseGetallglobalfieldsResponse(rsp *http.Response) (*GetallglobalfieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallglobalfieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateaglobalfieldResponse parses an HTTP response from a CreateaglobalfieldWithResponse call
func ParseCreateaglobalfieldResponse(rsp *http.Response) (*CreateaglobalfieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateaglobalfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseImportaglobalfieldResponse parses an HTTP response from a ImportaglobalfieldWithResponse call
func ParseImportaglobalfieldResponse(rsp *http.Response) (*ImportaglobalfieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ImportaglobalfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteglobalfieldResponse parses an HTTP response from a DeleteglobalfieldWithResponse call
func ParseDeleteglobalfieldResponse(rsp *http.Response) (*DeleteglobalfieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteglobalfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetasingleglobalfieldResponse parses an HTTP response from a GetasingleglobalfieldWithResponse call
func ParseGetasingleglobalfieldResponse(rsp *http.Response) (*GetasingleglobalfieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetasingleglobalfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateaglobalfieldResponse parses an HTTP response from a UpdateaglobalfieldWithResponse call
func ParseUpdateaglobalfieldResponse(rsp *http.Response) (*UpdateaglobalfieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateaglobalfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExportaglobalfieldResponse parses an HTTP response from a ExportaglobalfieldWithResponse call
func ParseExportaglobalfieldResponse(rsp *http.Response) (*ExportaglobalfieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExportaglobalfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetafallbacklanguageResponse parses an HTTP response from a SetafallbacklanguageWithResponse call
func ParseSetafallbacklanguageResponse(rsp *http.Response) (*SetafallbacklanguageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SetafallbacklanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallOrganizationsResponse parses an HTTP response from a GetallOrganizationsWithResponse call
func ParseGetallOrganizationsResponse(rsp *http.Response) (*GetallOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetasingleOrganizationResponse parses an HTTP response from a GetasingleOrganizationWithResponse call
func ParseGetasingleOrganizationResponse(rsp *http.Response) (*GetasingleOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetasingleOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetorganizationlogdetailsResponse parses an HTTP response from a GetorganizationlogdetailsWithResponse call
func ParseGetorganizationlogdetailsResponse(rsp *http.Response) (*GetorganizationlogdetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetorganizationlogdetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetorganizationlogitemResponse parses an HTTP response from a GetorganizationlogitemWithResponse call
func ParseGetorganizationlogitemResponse(rsp *http.Response) (*GetorganizationlogitemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetorganizationlogitemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallrolesinanOrganizationResponse parses an HTTP response from a GetallrolesinanOrganizationWithResponse call
func ParseGetallrolesinanOrganizationResponse(rsp *http.Response) (*GetallrolesinanOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallrolesinanOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallOrganizationinvitationsResponse parses an HTTP response from a GetallOrganizationinvitationsWithResponse call
func ParseGetallOrganizationinvitationsResponse(rsp *http.Response) (*GetallOrganizationinvitationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallOrganizationinvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAdduserstoOrganizationResponse parses an HTTP response from a AdduserstoOrganizationWithResponse call
func ParseAdduserstoOrganizationResponse(rsp *http.Response) (*AdduserstoOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AdduserstoOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResendpendingOrganizationinvitationResponse parses an HTTP response from a ResendpendingOrganizationinvitationWithResponse call
func ParseResendpendingOrganizationinvitationResponse(rsp *http.Response) (*ResendpendingOrganizationinvitationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResendpendingOrganizationinvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetallstacksinanOrganizationResponse parses an HTTP response from a GetallstacksinanOrganizationWithResponse call
func ParseGetallstacksinanOrganizationResponse(rsp *http.Response) (*GetallstacksinanOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetallstacksinanOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTransferOrganizationownershipResponse parses an HTTP response from a TransferOrganizationownershipWithResponse call
func ParseTransferOrganizationownershipResponse(rsp *http.Response) (*TransferOrganizationownershipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TransferOrganizationownershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletemultipleitemsfromaReleaseResponse parses an HTTP response from a DeletemultipleitemsfromaReleaseWithResponse call
func ParseDeletemultipleitemsfromaReleaseResponse(rsp *http.Response) (*DeletemultipleitemsfromaReleaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletemultipleitemsfromaReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletestackResponse parses an HTTP response from a DeletestackWithResponse call
func ParseDeletestackResponse(rsp *http.Response) (*DeletestackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletestackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetasinglestackResponse parses an HTTP response from a GetasinglestackWithResponse call
func ParseGetasinglestackResponse(rsp *http.Response) (*GetasinglestackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetasinglestackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatestackResponse parses an HTTP response from a CreatestackWithResponse call
func ParseCreatestackResponse(rsp *http.Response) (*CreatestackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatestackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatestackResponse parses an HTTP response from a UpdatestackWithResponse call
func ParseUpdatestackResponse(rsp *http.Response) (*UpdatestackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatestackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAllUsersResponse parses an HTTP response from a AllUsersWithResponse call
func ParseAllUsersResponse(rsp *http.Response) (*AllUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AllUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAcceptstackownedbyotheruserResponse parses an HTTP response from a AcceptstackownedbyotheruserWithResponse call
func ParseAcceptstackownedbyotheruserResponse(rsp *http.Response) (*AcceptstackownedbyotheruserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AcceptstackownedbyotheruserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetstacksettingsResponse parses an HTTP response from a GetstacksettingsWithResponse call
func ParseGetstacksettingsResponse(rsp *http.Response) (*GetstacksettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetstacksettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddstacksettingsResponse parses an HTTP response from a AddstacksettingsWithResponse call
func ParseAddstacksettingsResponse(rsp *http.Response) (*AddstacksettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddstacksettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetstackResponse parses an HTTP response from a ResetstackWithResponse call
func ParseResetstackResponse(rsp *http.Response) (*ResetstackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResetstackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseShareastackResponse parses an HTTP response from a ShareastackWithResponse call
func ParseShareastackResponse(rsp *http.Response) (*ShareastackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShareastackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTransferstackownershiptootherusersResponse parses an HTTP response from a TransferstackownershiptootherusersWithResponse call
func ParseTransferstackownershiptootherusersResponse(rsp *http.Response) (*TransferstackownershiptootherusersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TransferstackownershiptootherusersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnshareastackResponse parses an HTTP response from a UnshareastackWithResponse call
func ParseUnshareastackResponse(rsp *http.Response) (*UnshareastackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UnshareastackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateUserRoleResponse parses an HTTP response from a UpdateUserRoleWithResponse call
func ParseUpdateUserRoleResponse(rsp *http.Response) (*UpdateUserRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetuserResponse parses an HTTP response from a GetuserWithResponse call
func ParseGetuserResponse(rsp *http.Response) (*GetuserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetuserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateuserResponse parses an HTTP response from a UpdateuserWithResponse call
func ParseUpdateuserResponse(rsp *http.Response) (*UpdateuserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateuserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogoutofyouraccountResponse parses an HTTP response from a LogoutofyouraccountWithResponse call
func ParseLogoutofyouraccountResponse(rsp *http.Response) (*LogoutofyouraccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LogoutofyouraccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogintoyouraccountResponse parses an HTTP response from a LogintoyouraccountWithResponse call
func ParseLogintoyouraccountResponse(rsp *http.Response) (*LogintoyouraccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LogintoyouraccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseActivateauseraccountResponse parses an HTTP response from a ActivateauseraccountWithResponse call
func ParseActivateauseraccountResponse(rsp *http.Response) (*ActivateauseraccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ActivateauseraccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRequestforapasswordResponse parses an HTTP response from a RequestforapasswordWithResponse call
func ParseRequestforapasswordResponse(rsp *http.Response) (*RequestforapasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RequestforapasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetpasswordResponse parses an HTTP response from a ResetpasswordWithResponse call
func ParseResetpasswordResponse(rsp *http.Response) (*ResetpasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResetpasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

